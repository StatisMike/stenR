% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/handle_raw_scores.R
\name{ScaleSpec}
\alias{ScaleSpec}
\title{Scale Specification object}
\usage{
ScaleSpec(
  name,
  item_names,
  reverse,
  min,
  max,
  na_value = as.integer(NA),
  reverse_custom,
  na_value_custom
)
}
\arguments{
\item{name}{character with name of the scale/factor}

\item{item_names}{character vector containing names of the items that the
scale/factor consists of.}

\item{reverse}{character vector containing names of the items that need to be
reversed during scale/factor summing. Reversed using the default \code{min} and
\code{max} values.}

\item{min, max}{integer containing the default minimal/maximal value that the
answer to the item can be scored as. Needed only if there are any names
presented in \code{reverse}.}

\item{na_value}{integer value to be input in missing values as default.
Defaults to \code{as.integer(NA)}.}

\item{reverse_custom}{if there are any differently-scored items in need of
reverse scoring, their specification need to be given there as a \emph{data.frame}
containing columns: \code{item_names}, \code{min} and \code{max}.}

\item{na_value_custom}{if there are any need for specific questions be gives
specific values in place of \code{NA}s, provide a named integer vector there. Names
should be the names of the questons.}
}
\value{
object of \emph{ScaleSpec} class
}
\description{
Object containing scale or factor specification data. It describes
the scale or factor, with regard to which items from the source data are part
of it, which need to be summed with reverse scoring, and how to handle \code{NA}s.
To be used with \code{\link[=sum_items_to_scale]{sum_items_to_scale()}} function to preprocess item data.
}
\examples{
# simple scale specification

simple_scaleSpec <- ScaleSpec(
  name = "simple",
  # scale consists of 5 items
  item_names = c("item_1", "item_2", "item_3", "item_4", "item_5"),
  # item 2 and 5 need to be reversed
  reverse = c("item_2", "item_5"),
  # item scores can take range of values: 1-5
  min = 1,
  max = 5)



# complec scale specification

complex_scaleSpec <- ScaleSpec(
  name = "complex",
  item_names = c("item_1", "item_2", "item_3", "item_4", "item_5"),
  reverse = "item_2",
  min = 1,
  max = 5,
  # na values by default will be filled with `3`
  na_value = 3,
  # except for item_4, where they will be filled with `2`
  na_value_custom = c(item_4 = 2),
  # item 4 and 5 can take custom range of values, so the reversing
  # of score need to be handled customly
  reverse_custom = 
    data.frame(item_names = c("item_4", "item_5"),
               min = c(1, 1),
               max = c(3, 7))
)
}
\seealso{
Other item preprocessing functions: 
\code{\link{sum_items_to_scale}()}
}
\concept{item preprocessing functions}
