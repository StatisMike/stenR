[{"path":"https://statismike.github.io/stenR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 stenR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://statismike.github.io/stenR/articles/tour.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Tour from data to results","text":"stenR main focus standardization normalization raw scores questionnaire survey basis Classical Test Theorem. Particularly psychology social studies common interpret raw results measurement individual context. actuality, usually mistake . Instead, need evaluate score single questionee basis larger sample. can done finding place every individual raw score distribution representative sample. One can refer process normalization. Additional step phase standardize data even : quantile fitting standard scale. need noted rarely one answer one question (item) enough measure latent variable. Almost always need construct scale factor similar items gather behavioral sample. vital preprocessing phase transforming item-level raw scores scale-level can also handled functions available package, though feature main focus. Factor analysis actual construction scales factors beyond scope package. multiple useful solid tools available . Look upon psych /lavaan features. journey raw, questionnaire data normalized standardized results presented vignette.","code":""},{"path":"https://statismike.github.io/stenR/articles/tour.html","id":"raw-questionnaire-data-preprocessing","dir":"Articles","previous_headings":"","what":"Raw questionnaire data preprocessing","title":"Tour from data to results","text":"work dataset available package: SLCS. contains answers 103 people Polish version Self-Liking Self-Competence Scale. can seen , contains demographical data questionee answers 16 diagnostic items. Authors measure prepared instructions calculating scores two subscales (Self-Liking Self-Competence). General Score , actually, just sum subscale scores. Self-Liking: 1R, 3, 5, 6R, 7R, 9, 11, 15R Self-Competence: 2, 4, 8R, 10R, 12, 13R, 14, 16 Items numbers suffixed R means, particular item need reversed summarizing rest calculate raw score subscale. ’s measure construction, answers items negatively correlated whole scale. steps can achieved using item-preprocessing functions stenR. Firstly, need create scale specification objects refer items available data name. need also list items need reversing () declare NA insertion strategies (default: insertion). Absolute minimum maximum score item need also provided step. allows correct computation even absolute values actually available data summed factor. situation happen first computation score table full representative sample, likely happen summarizing scores observations. scale specification objects created, can finally transform item-level raw scores scale-level ones using sum_items_to_scale() function. ScaleSpec CombScaleSpec object provided call used create one variable, taking account items need reversing (sub-scales case CombScaleSpec), well NA imputation strategies chosen scales. default columns available resulting data.frame, specifying retain argument can control . point successfully prepared data: now describes latent variables actually wanted measure, individual items. place next step: results normalization standardization. ScaleSpec CombScaleSpec objects specific print summary methods defined.","code":"library(stenR) #> This is version 0.6.9 of stenR package. #> Visit https://github.com/statismike/stenR to report an issue or contribute. If you like it - star it! str(SLCS) #> 'data.frame':    103 obs. of  19 variables: #>  $ user_id: chr  \"damaged_kiwi\" \"unilateralised_anglerfish\" \"technical_anemonecrab\" \"temperate_americancurl\" ... #>  $ sex    : chr  \"M\" \"F\" \"F\" \"F\" ... #>  $ age    : int  30 31 22 26 22 17 27 24 20 19 ... #>  $ SLCS_1 : int  4 5 4 5 5 5 5 4 4 5 ... #>  $ SLCS_2 : int  2 2 4 3 2 3 1 5 2 1 ... #>  $ SLCS_3 : int  1 2 4 2 3 1 1 4 1 2 ... #>  $ SLCS_4 : int  2 1 4 2 4 2 1 4 4 2 ... #>  $ SLCS_5 : int  2 2 4 1 2 2 2 4 2 2 ... #>  $ SLCS_6 : int  4 4 5 5 5 5 1 2 5 4 ... #>  $ SLCS_7 : int  4 4 4 5 3 5 2 3 5 3 ... #>  $ SLCS_8 : int  4 5 4 5 4 5 5 4 4 5 ... #>  $ SLCS_9 : int  2 3 2 1 3 1 1 4 1 1 ... #>  $ SLCS_10: int  4 4 3 4 4 4 5 4 5 5 ... #>  $ SLCS_11: int  1 1 2 1 1 2 1 3 1 1 ... #>  $ SLCS_12: int  4 2 4 3 3 2 2 4 3 1 ... #>  $ SLCS_13: int  4 5 5 4 3 4 4 4 5 5 ... #>  $ SLCS_14: int  2 1 3 2 4 1 1 4 1 1 ... #>  $ SLCS_15: int  5 4 4 4 4 3 3 2 5 4 ... #>  $ SLCS_16: int  4 5 5 4 5 4 5 5 5 5 ... # create ScaleSpec objects for sub-scales SL_spec <- ScaleSpec(   name = \"Self-Liking\",   item_names = c(\"SLCS_1\", \"SLCS_3\", \"SLCS_5\", \"SLCS_6\", \"SLCS_7\",                   \"SLCS_9\", \"SLCS_11\", \"SLCS_15\"),   min = 1,   max = 5,   reverse = c(\"SLCS_1\", \"SLCS_6\", \"SLCS_7\", \"SLCS_15\") )  SC_spec <- ScaleSpec(   name = \"Self-Competence\",   item_names = c(\"SLCS_2\", \"SLCS_4\", \"SLCS_8\", \"SLCS_10\", \"SLCS_12\",                  \"SLCS_13\", \"SLCS_14\", \"SLCS_16\"),   min = 1,   max = 5,   reverse = c(\"SLCS_8\", \"SLCS_10\", \"SLCS_13\") )  # create CombScaleSpec object for general scale using single-scale  # specification GS_spec <- CombScaleSpec(   name = \"General Score\",   SL_spec,   SC_spec )  print(SL_spec) #> <ScaleSpec>: Self-Liking #> No. items: 8 [4 reversed] print(SC_spec) #> <ScaleSpec>: Self-Competence #> No. items: 8 [3 reversed] print(GS_spec) #> <CombScaleSpec>: General Score #> Total items: 16 #> Underlying objects: #> 1. <ScaleSpec> Self-Liking [No.items: 8] #> 2. <ScaleSpec> Self-Competence [No.items: 8] summed_data <- sum_items_to_scale(   data = SLCS,   SL_spec,   SC_spec,   GS_spec,   retain = c(\"user_id\", \"sex\") )  str(summed_data) #> 'data.frame':    103 obs. of  5 variables: #>  $ user_id        : chr  \"damaged_kiwi\" \"unilateralised_anglerfish\" \"technical_anemonecrab\" \"temperate_americancurl\" ... #>  $ sex            : chr  \"M\" \"F\" \"F\" \"F\" ... #>  $ Self-Liking    : int  13 15 19 10 16 12 18 28 10 14 ... #>  $ Self-Competence: int  20 15 26 19 25 17 14 28 19 13 ... #>  $ General Score  : int  33 30 45 29 41 29 32 56 29 27 ..."},{"path":"https://statismike.github.io/stenR/articles/tour.html","id":"normalize-and-standardize-the-results","dir":"Articles","previous_headings":"","what":"Normalize and standardize the results","title":"Tour from data to results","text":"take brief look procedural workflow normalization standardization. noted, verbose less features object-oriented workflow. Nevertheless, recommended useRs don’t much experience utilizing R6 classes. information , read Procedural Object-oriented workflows stenR vignette. process data, stenR need compute object class ScoreTable. similar regular score tables can seen many measures documentations, though computed directly basis available raw scores representative sample. first, initial construction can reused new observations. two step process. Firstly, need compute FrequencyTable object void standard score scale every sub-scale scale. warnings printed : generated raw score values missing -actual minimal maximal values raw scores. rule thumb - wider raw score range smaller less-representative sample , bigger possibility happen. recommended try gather bigger sample happens - unless sure representative enough. defined, can transformed ScoreTable objects providing StandardScale object. Objects popular scales psychology already defined - use commonly utilized Standard Ten Scale: STEN point, last thing remains normalize scores. can done using normalize_score() normalize_scores_df() functions.","code":"# Create the FrequencyTables SL_ft <- FrequencyTable(summed_data$`Self-Liking`) #> ℹ There are missing raw score values between minimum and maximum raw scores. #>   They have been filled automatically. #>   No. missing: 3/33 [9.09%] SC_ft <- FrequencyTable(summed_data$`Self-Competence`) #> ℹ There are missing raw score values between minimum and maximum raw scores. #>   They have been filled automatically. #>   No. missing: 1/24 [4.17%] GS_ft <- FrequencyTable(summed_data$`General Score`) #> ℹ There are missing raw score values between minimum and maximum raw scores. #>   They have been filled automatically. #>   No. missing: 13/53 [24.53%] # Check what is the STEN *StandardScale* definition print(STEN) #> <StandardScale>: sten #> `M`: 5.5 `SD`: 2 `min` 1: `max`: 10  # Calculate the ScoreTables SL_st <- ScoreTable(SL_ft, STEN) SC_st <- ScoreTable(SC_ft, STEN) GS_st <- ScoreTable(GS_ft, STEN) # normalize each of the scores in one call normalized_at_once <- normalize_scores_df(   summed_data,   vars = c(\"Self-Liking\", \"Self-Competence\", \"General Score\"),   SL_st,   SC_st,   GS_st,   what = \"sten\",   retain = c(\"user_id\", \"sex\") )  str(normalized_at_once) #> 'data.frame':    103 obs. of  5 variables: #>  $ user_id        : chr  \"damaged_kiwi\" \"unilateralised_anglerfish\" \"technical_anemonecrab\" \"temperate_americancurl\" ... #>  $ sex            : chr  \"M\" \"F\" \"F\" \"F\" ... #>  $ Self-Liking    : num  3 4 5 2 4 3 5 8 2 4 ... #>  $ Self-Competence: num  5 2 7 4 7 3 2 8 4 2 ... #>  $ General Score  : num  4 3 6 3 5 3 4 8 3 2 ...  # or normalize scores individually SL_sten <-    normalize_score(summed_data$`Self-Liking`,                   table = SL_st,                   what = \"sten\")  SC_sten <-    normalize_score(summed_data$`Self-Competence`,                   table = SC_st,                   what = \"sten\")  GC_sten <-    normalize_score(summed_data$`General Score`,                   table = GS_st,                   what = \"sten\")  # check the structure str(list(SL_sten, SC_sten, GC_sten)) #> List of 3 #>  $ : num [1:103] 3 4 5 2 4 3 5 8 2 4 ... #>  $ : num [1:103] 5 2 7 4 7 3 2 8 4 2 ... #>  $ : num [1:103] 4 3 6 3 5 3 4 8 3 2 ..."},{"path":"https://statismike.github.io/stenR/articles/tour.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Tour from data to results","text":", came end journey. summarize: ScaleSpec() CombScaleSpec() sum_items_to_scale() FrequencyTable() ScoreTable() normalize_score()","code":""},{"path":"https://statismike.github.io/stenR/articles/usage.html","id":"processing-raw-item-scores-to-raw-factorscales","dir":"Articles","previous_headings":"","what":"Processing raw item scores to raw factor/scales","title":"stenR usage","text":"conducting study, results usually available form responses scoring scale separate items. analysis need gathered scales factors (unless one-item scale). stenR provides functions make process straightforward. use one datasets provided package: SLCS, containing responses items Self-Liking Self-Competence Scale. consists 16 items, can grouped two subscales (Self-Liking, Self-Competence) General Score. summarize scores need create ScaleSpec objects ScaleSpec() constructor function. objects contain instructions R scales structured, importantly: name: name resulting variable item_names: names variables summed scale reverse: names variables need scores reversed min, max: absolute min max raw scores main factors factors higher level, ScaleSpec objects can also combined CombScaleSpec object CombScaleSpec() constructor function. example General Score factor. scale specifications ready, can used get factor/scale data, summarized accordance instructions provided ScaleSpec CombScaleSpec objects.","code":"str(SLCS) #> 'data.frame':    103 obs. of  19 variables: #>  $ user_id: chr  \"damaged_kiwi\" \"unilateralised_anglerfish\" \"technical_anemonecrab\" \"temperate_americancurl\" ... #>  $ sex    : chr  \"M\" \"F\" \"F\" \"F\" ... #>  $ age    : int  30 31 22 26 22 17 27 24 20 19 ... #>  $ SLCS_1 : int  4 5 4 5 5 5 5 4 4 5 ... #>  $ SLCS_2 : int  2 2 4 3 2 3 1 5 2 1 ... #>  $ SLCS_3 : int  1 2 4 2 3 1 1 4 1 2 ... #>  $ SLCS_4 : int  2 1 4 2 4 2 1 4 4 2 ... #>  $ SLCS_5 : int  2 2 4 1 2 2 2 4 2 2 ... #>  $ SLCS_6 : int  4 4 5 5 5 5 1 2 5 4 ... #>  $ SLCS_7 : int  4 4 4 5 3 5 2 3 5 3 ... #>  $ SLCS_8 : int  4 5 4 5 4 5 5 4 4 5 ... #>  $ SLCS_9 : int  2 3 2 1 3 1 1 4 1 1 ... #>  $ SLCS_10: int  4 4 3 4 4 4 5 4 5 5 ... #>  $ SLCS_11: int  1 1 2 1 1 2 1 3 1 1 ... #>  $ SLCS_12: int  4 2 4 3 3 2 2 4 3 1 ... #>  $ SLCS_13: int  4 5 5 4 3 4 4 4 5 5 ... #>  $ SLCS_14: int  2 1 3 2 4 1 1 4 1 1 ... #>  $ SLCS_15: int  5 4 4 4 4 3 3 2 5 4 ... #>  $ SLCS_16: int  4 5 5 4 5 4 5 5 5 5 ... SL_spec <- ScaleSpec(   name = \"SelfLiking\", min = 1, max = 5,   item_names = c(\"SLCS_1\", \"SLCS_3\", \"SLCS_5\", \"SLCS_6\", \"SLCS_7\",                   \"SLCS_9\", \"SLCS_11\", \"SLCS_15\"),   reverse = c(\"SLCS_1\", \"SLCS_6\", \"SLCS_7\", \"SLCS_15\") ) SC_spec <- ScaleSpec(   name = \"SelfCompetence\", min = 1, max = 5,   item_names = c(\"SLCS_2\", \"SLCS_4\", \"SLCS_8\", \"SLCS_10\", \"SLCS_12\",                  \"SLCS_13\", \"SLCS_14\", \"SLCS_16\"),   reverse = c(\"SLCS_8\", \"SLCS_10\", \"SLCS_13\") ) GS_spec <- CombScaleSpec(   name = \"GeneralScore\",   SL_spec, SC_spec )  # subscales can be also reversed GS_with_rev <- CombScaleSpec(   name = \"rev_example\",   SL_spec, SC_spec,   reverse = \"SelfCompetence\" ) summed_SCLS <- sum_items_to_scale(   SLCS,   SL_spec,   SC_spec,   GS_spec,   GS_with_rev )  str(summed_SCLS) #> 'data.frame':    103 obs. of  4 variables: #>  $ SelfLiking    : int  13 15 19 10 16 12 18 28 10 14 ... #>  $ SelfCompetence: int  20 15 26 19 25 17 14 28 19 13 ... #>  $ GeneralScore  : int  33 30 45 29 41 29 32 56 29 27 ... #>  $ rev_example   : int  41 48 41 39 39 43 52 48 39 49 ..."},{"path":"https://statismike.github.io/stenR/articles/usage.html","id":"normalize-scores-with-frequencytable","dir":"Articles","previous_headings":"","what":"Normalize scores with FrequencyTable","title":"stenR usage","text":"times great number observations prefer develop norms (usually, creator questionnaire adaptation) recommended generate FrequencyTable ScoreTable objects. Resulting ScoreTable objects can either used normalize scores create exportable non-R specific objects ScoringTable object. also support automatic grouping observations using GroupedFrequencyTable GroupedScoreTable objects. mentioned Grouping section. use one datasets provided package: HEXACO_60, containing raw scores scales HEXACO 60-item questionnaire. Create FrequencyTable objects first, need create FrequencyTable object variable using FrequencyTable() constructor function. missing raw scores data, helpful message displayed. can check frequencies look like using plot() function.  can see, missing values gathered near tails distribution. can happen even many observations - case sample (103 observations) likely. Create ScoreTable objects ScoreTable object basically frequency table additional standard scale specification attached. can create specification using StandardScale(), use example already provided STEN (Standard TEN) score specification Normalize standardize scores Created ScoreTables can used calculate normalized scores. Normalization can done either individual vectors basic normalize_score() function: using convienient wrapped whole data.frame","code":"str(HEXACO_60) #> 'data.frame':    204 obs. of  9 variables: #>  $ user_id: chr  \"neutral_peregrinefalcon\" \"trapeziform_zebradove\" \"polyhedral_solenodon\" \"decrepit_norwayrat\" ... #>  $ sex    : chr  \"F\" \"F\" \"F\" \"F\" ... #>  $ age    : int  26 24 26 25 31 25 62 19 24 26 ... #>  $ HEX_H  : int  42 38 18 21 32 34 37 39 41 30 ... #>  $ HEX_E  : int  33 31 17 24 35 30 37 13 33 24 ... #>  $ HEX_X  : int  34 36 16 29 24 34 39 27 23 34 ... #>  $ HEX_A  : int  36 44 42 22 31 34 23 27 15 21 ... #>  $ HEX_C  : int  36 36 35 43 34 28 41 19 49 38 ... #>  $ HEX_O  : int  31 28 37 47 28 39 44 42 22 38 ... HEX_C_ft <- FrequencyTable(HEXACO_60$HEX_C) HEX_E_ft <- FrequencyTable(HEXACO_60$HEX_E) #> ℹ There are missing raw score values between minimum and maximum raw scores. #>   They have been filled automatically. #>   No. missing: 5/38 [13.16%] plot(HEX_E_ft) HEX_C_st <- ScoreTable(   ft = HEX_C_ft,   scale = STEN ) HEX_E_st <-ScoreTable(   ft = HEX_E_ft,   scale = STEN ) HEX_C_norm <- normalize_score(   HEXACO_60$HEX_C,   table = HEX_C_st,   what = \"sten\" ) HEX_E_norm <- normalize_score(   HEXACO_60$HEX_E,   table = HEX_E_st,   what = \"sten\" ) summary(HEX_C_norm) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   1.000   4.000   5.000   5.495   7.000  10.000 summary(HEX_E_norm) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   1.000   4.000   6.000   5.539   7.000  10.000 HEX_CE_norm <- normalize_scores_df(   data = HEXACO_60,   vars = c(\"HEX_C\", \"HEX_E\"),   HEX_C_st,   HEX_E_st,   what = \"sten\",   # by default no other variables will be retained   retain = FALSE ) summary(HEX_CE_norm) #>      HEX_C            HEX_E        #>  Min.   : 1.000   Min.   : 1.000   #>  1st Qu.: 4.000   1st Qu.: 4.000   #>  Median : 5.000   Median : 6.000   #>  Mean   : 5.495   Mean   : 5.539   #>  3rd Qu.: 7.000   3rd Qu.: 7.000   #>  Max.   :10.000   Max.   :10.000 str(HEX_CE_norm) #> 'data.frame':    204 obs. of  2 variables: #>  $ HEX_C: num  6 6 5 8 5 3 7 1 10 6 ... #>  $ HEX_E: num  5 5 2 3 6 5 6 1 5 3 ..."},{"path":"https://statismike.github.io/stenR/articles/usage.html","id":"normalize-scores-using-imported-scoringtable","dir":"Articles","previous_headings":"","what":"Normalize scores using imported ScoringTable","title":"stenR usage","text":"users using already developed norms creators questionnaire. Scoring tables provided measure documentation, ScoringTable object mirroring usual representation. ScoringTable object can either created ScoreTable GroupedScoreTable object imported csv json file. manual creation, csv format recommended. file look similar one (created basis Consciousness ScoreTable code section ) first column contain standardized scores second column contain raw scores pattern {min}-{max} need changed standardized score ScoringTable objects also supports different groups observations - case 2nd n-th columns reflecting scores group. mentioned Grouping section. can import ScoringTables using import_ScoringTable() function. can used normalize scores, similarly normalize_scores_df:","code":"\"sten\",\"Score\" 1,\"10-19\" 2,\"20-25\" 3,\"26-28\" 4,\"29-31\" 5,\"32-35\" 6,\"36-39\" 7,\"40-42\" 8,\"43-46\" 9,\"47-48\" 10,\"49-50\" HEX_C_Scoring <- import_ScoringTable(   source = C_ScoringTable,   method = \"csv\" ) HEX_E_Scoring <- import_ScoringTable(   source = E_ScoringTable,   method = \"csv\" ) summary(HEX_C_Scoring) #> <ScoringTable> #> No. groups: ungrouped #> Scale: \"sten\"; `min`: 1; `max`: 10 summary(HEX_E_Scoring) #> <ScoringTable> #> No. groups: ungrouped #> Scale: \"sten\"; `min`: 1; `max`: 10 HEX_CE_norm <- normalize_scores_scoring(   data = HEXACO_60,   vars = c(\"HEX_C\", \"HEX_E\"),   HEX_C_Scoring,   HEX_E_Scoring ) summary(HEX_CE_norm) #>      HEX_C            HEX_E        #>  Min.   : 1.000   Min.   : 1.000   #>  1st Qu.: 4.000   1st Qu.: 4.000   #>  Median : 5.000   Median : 6.000   #>  Mean   : 5.495   Mean   : 5.539   #>  3rd Qu.: 7.000   3rd Qu.: 7.000   #>  Max.   :10.000   Max.   :10.000 str(HEX_CE_norm) #> 'data.frame':    204 obs. of  2 variables: #>  $ HEX_C: num  6 6 5 8 5 3 7 1 10 6 ... #>  $ HEX_E: num  5 5 2 3 6 5 6 1 5 3 ..."},{"path":"https://statismike.github.io/stenR/articles/usage.html","id":"groupings","dir":"Articles","previous_headings":"","what":"Groupings","title":"stenR usage","text":"often norms different different groups: often varying demographic variables, like biological sex biological age. stenR functions provide support groups intoducing Grouped variants FrequencyTable ScoreTable (regular ScoringTable supports ) GroupConditions class. GroupConditions works similarly ScaleSpec CombScaleSpec objects: provides information assign observations. need name category (mainly informative reasons) conditions following syntax name group LHS boolean condition RHS. can used create GroupedFrequencyTable, following : GroupedScoreTable , optionally, ScoringTable - create ScoringTable import. examples using IPIP_NEO_300 dataset provided package. contains age sex variables, summed raw scores 5 scales IPIP NEO questionnaire (300 item version). GroupedFrequencyTable, GroupedScoreTable ScoringTable export Workflow similiar ungrouped tables. GroupedScoreTable can used normalize scores using normalize_scores_grouped(). default, variables retained. can also provide column name contain assigned group names per observation. GroupedScoreTable can transformed ScoringTable exported csv json file. ScoringTable import file import ScoringTable groups csv, needs look accordingly: Usually measure developers don’t include norms observations unmet conditions (groups .names stenR convention). ScoringTable constructed without groups produce NA normalize_scores_scoring() observation isn’t matching condition provided (’s GroupedFrequencyTable() generates groups default). case csv file smaller: GroupConditions objects need provided either csv file cond_file argument R objects conditions argument import_ScoringTable() function. import, ScoringTable can used generate scores.","code":"sex_grouping <- GroupConditions(   conditions_category = \"Sex\",   \"M\" ~ sex == \"M\",   \"F\" ~ sex == \"F\" ) age_grouping <- GroupConditions(   conditions_category = \"Age\",   \"to 30\" ~ age < 30,   \"above 30\" ~ age >= 31 ) sex_grouping #> <GroupConditions> #> Conditions category: Sex #> Tested variables: \"sex\" #> 2 Groups: #> • M IF: sex == \"M\" #> • F IF: sex == \"F\" #> Forced disjointedness by default: TRUE #> Forced exhaustiveness by default: FALSE age_grouping #> <GroupConditions> #> Conditions category: Age #> Tested variables: \"age\" #> 2 Groups: #> • to 30 IF: age < 30 #> • above 30 IF: age >= 31 #> Forced disjointedness by default: TRUE #> Forced exhaustiveness by default: FALSE str(IPIP_NEO_300) #> 'data.frame':    13161 obs. of  7 variables: #>  $ sex: chr  \"F\" \"F\" \"F\" \"M\" ... #>  $ age: int  25 18 16 23 25 26 23 66 19 36 ... #>  $ N  : int  187 209 209 167 163 193 NA 95 251 NA ... #>  $ E  : int  NA 222 165 176 195 145 229 174 NA 194 ... #>  $ O  : int  234 224 197 180 209 243 237 198 NA 266 ... #>  $ A  : int  221 178 224 182 243 231 234 269 NA 184 ... #>  $ C  : int  234 178 224 224 217 219 232 235 176 NA ... N_gft <- GroupedFrequencyTable(   data = IPIP_NEO_300,   conditions = list(age_grouping, sex_grouping),   var = \"N\",   # By default, norms are are also computed for '.all' groups. These are   # used if by any reason observation can't be assigned to any group   # in corresponding condition category   .all = TRUE ) #> ℹ There are missing raw score values between minimum and maximum raw scores for #>   some groups. They have been filled automatically. #> • to 30:M No. missing: 8/214; 3.74% #> • to 30:F No. missing: 28/220; 12.73% #> • to 30:.all2 No. missing: 14/230; 6.09% #> • above 30:M No. missing: 16/220; 7.27% #> • above 30:F No. missing: 19/213; 8.92% #> • above 30:.all2 No. missing: 14/224; 6.25% #> • .all1:M No. missing: 6/221; 2.71% #> • .all1:F No. missing: 12/220; 5.45% #> • .all1:.all2 No. missing: 6/230; 2.61% N_gst <- GroupedScoreTable(N_gft, scale = STEN) plot(N_gst) NEO_norm <- normalize_scores_grouped(   data = IPIP_NEO_300,   vars = \"N\",   N_gst,   what = \"sten\",   group_col = \"Group\" ) str(NEO_norm) #> Classes 'data.table' and 'data.frame':   13161 obs. of  2 variables: #>  $ Group: chr  \"to 30:F\" \"to 30:F\" \"to 30:F\" \"to 30:M\" ... #>  $ N    : num  6 7 7 6 5 7 NA 2 9 NA ... table(NEO_norm$Group) #>  #>    .all1:F    .all1:M above 30:F above 30:M    to 30:F    to 30:M  #>        172        176       2955       2951       3419       3488 ST_csv <- tempfile(fileext = \".csv\") cond_csv <- tempfile(fileext = \".csv\")  N_ST <- to_ScoringTable(   table = N_gst,   min_raw = 60,   max_raw = 300 )  summary(N_ST) #> <ScoringTable> #> No. groups: 10 #> Scale: \"sten\"; `min`: 1; `max`: 10 #> GroupConditions: 2 #>   1. Category: Age #>     • Tested vars: \"age\" #>     • No. groups:: 2 #>   2. Category: Sex #>     • Tested vars: \"sex\" #>     • No. groups:: 2 #> .all groups included: TRUE  export_ScoringTable(   table = N_ST,   out_file = ST_csv,   method = \"csv\",   # you can also export GroupConditions to seperate csv file   cond_file = cond_csv ) sten,to 30:M,to 30:F,to 30:.all2,above 30:M,above 30:F,above 30:.all2,.all1:M,.all1:F,.all1:.all2 1,60-94,60-111,60-101,60-85,60-98,60-92,60-90,60-104,60-95 2,95-110,112-128,102-117,86-101,99-112,93-106,91-106,105-119,96-111 3,111-126,129-144,118-134,102-117,113-128,107-122,107-122,120-136,112-128 4,127-143,145-162,135-152,118-135,129-146,123-140,123-140,137-154,129-147 5,144-162,163-180,153-171,136-154,147-165,141-160,141-159,155-174,148-166 6,163-181,181-199,172-190,155-175,166-185,161-180,160-179,175-194,167-186 7,182-201,200-218,191-210,176-198,186-208,181-203,180-200,195-214,187-208 8,202-222,219-238,211-232,199-222,209-229,204-226,201-222,215-234,209-229 9,223-244,239-256,233-251,223-245,230-247,227-247,223-245,235-251,230-248 10,245-300,257-300,252-300,246-300,248-300,248-300,246-300,252-300,249-300 sten,to 30:M,to 30:F,above 30:M,above 30:F 1,60-94,60-111,60-85,60-98 2,95-110,112-128,86-101,99-112 3,111-126,129-144,102-117,113-128 4,127-143,145-162,118-135,129-146 5,144-162,163-180,136-154,147-165 6,163-181,181-199,155-175,166-185 7,182-201,200-218,176-198,186-208 8,202-222,219-238,199-222,209-229 9,223-244,239-256,223-245,230-247 10,245-300,257-300,246-300,248-300 imported_ST <- import_ScoringTable(   source = ST_csv,   method = \"csv\",   conditions = list(age_grouping, sex_grouping) )  summary(imported_ST) #> <ScoringTable> #> No. groups: 10 #> Scale: \"sten\"; `min`: 1; `max`: 10 #> GroupConditions: 2 #>   1. Category: Age #>     • Tested vars: \"age\" #>     • No. groups:: 2 #>   2. Category: Sex #>     • Tested vars: \"sex\" #>     • No. groups:: 2 #> .all groups included: TRUE NEO_norm <- normalize_scores_scoring(   data = IPIP_NEO_300,   vars = \"N\",   imported_ST,   group_col = \"Group\" ) str(NEO_norm) #> 'data.frame':    13161 obs. of  2 variables: #>  $ Group: chr  \"to 30:F\" \"to 30:F\" \"to 30:F\" \"to 30:M\" ... #>  $ N    : num  6 7 7 6 5 7 NA 2 9 NA ... table(NEO_norm$Group) #>  #>    .all1:F    .all1:M above 30:F above 30:M    to 30:F    to 30:M  #>        172        176       2955       2951       3419       3488"},{"path":"https://statismike.github.io/stenR/articles/usage.html","id":"additional-functions","dir":"Articles","previous_headings":"","what":"Additional functions","title":"stenR usage","text":"information enough basic usage stenR. developed mind multiple use-cases general customizability. additional possibilities described.","code":""},{"path":"https://statismike.github.io/stenR/articles/usage.html","id":"standardscale","dir":"Articles","previous_headings":"Additional functions","what":"StandardScale()","title":"stenR usage","text":"examples used STEN StandardScale object, provided package. can check available scales ?default_scales doc. can also define StandardScale object using StandardScale function.","code":"new_scale <- StandardScale(\"my_scale\", 10, 3, 0, 20)  # let's see if everything is correct new_scale #> <StandardScale>: my_scale #> `M`: 10 `SD`: 3 `min` 0: `max`: 20  # how does its distribution looks like? plot(new_scale)"},{"path":"https://statismike.github.io/stenR/articles/usage.html","id":"compscoretable-r6-object","dir":"Articles","previous_headings":"Additional functions","what":"CompScoreTable R6 object","title":"stenR usage","text":"addition procedural workflow described , also R6 class definition prepared handle creation ScoreTables generation normalized scores: CompScoreTable. one useful feature object, mainly ability automatically recalculate ScoreTables based raw score values calculated using standardize method. can helpful inter-session continuity. Currently one object, supporting ungrouped workflow. Grouped version currently works.","code":""},{"path":"https://statismike.github.io/stenR/articles/usage.html","id":"initialize-the-object","dir":"Articles","previous_headings":"Additional functions > CompScoreTable R6 object","what":"Initialize the object","title":"stenR usage","text":"object initialization can attach previously calculated FrequencyTables /StandardScales. fully optional, can also done afterwards.","code":"# attach during initialization HexCST <- CompScoreTable$new(   tables = list(HEX_E = HEX_E_ft),   scales = STEN )  # attach later altCST <- CompScoreTable$new() altCST$attach_FrequencyTable(HEX_E_ft, \"HEX_E\") altCST$attach_StandardScale(STEN)  # there are no visible differences in objects structure summary(HexCST) #> <CompScoreTable> #> Attached <ScoreTable> #>  variable   n      range #>     HEX_E 204 incomplete #> Attached <StandardScale> #>  name   M SD min max #>  sten 5.5  2   1  10 summary(altCST) #> <CompScoreTable> #> Attached <ScoreTable> #>  variable   n      range #>     HEX_E 204 incomplete #> Attached <StandardScale> #>  name   M SD min max #>  sten 5.5  2   1  10"},{"path":"https://statismike.github.io/stenR/articles/usage.html","id":"expand-compscoretable","dir":"Articles","previous_headings":"Additional functions > CompScoreTable R6 object","what":"Expand CompScoreTable","title":"stenR usage","text":"creation object can expanded FrequencyTables StandardScales. ScoreTables internally recalculated","code":"# add new FrequencyTable HexCST$attach_FrequencyTable(FrequencyTable(HEXACO_60$HEX_C), \"HEX_C\") summary(HexCST) #> <CompScoreTable> #> Attached <ScoreTable> #>  variable   n      range #>     HEX_E 204 incomplete #>     HEX_C 204   complete #> Attached <StandardScale> #>  name   M SD min max #>  sten 5.5  2   1  10  # add new StandardScale HexCST$attach_StandardScale(STANINE) summary(HexCST) #> <CompScoreTable> #> Attached <ScoreTable> #>  variable   n      range #>     HEX_E 204 incomplete #>     HEX_C 204   complete #> Attached <StandardScale> #>     name   M SD min max #>     sten 5.5  2   1  10 #>  stanine 5.0  2   1   9"},{"path":"https://statismike.github.io/stenR/articles/usage.html","id":"standardize-scores","dir":"Articles","previous_headings":"Additional functions > CompScoreTable R6 object","what":"Standardize scores","title":"stenR usage","text":"object ready, score standardization may begin. Let’s feed raw scores!","code":"# standardize the Honesty-Humility and Consciousness HexCST$standardize(   data = head(HEXACO_60),   what = \"sten\",   vars = c(\"HEX_E\", \"HEX_C\") ) #>                   user_id sex age HEX_H HEX_E HEX_X HEX_A HEX_C HEX_O #> 1 neutral_peregrinefalcon   F  26    42     5    34    36     6    31 #> 2   trapeziform_zebradove   F  24    38     5    36    44     6    28 #> 3    polyhedral_solenodon   F  26    18     2    16    42     5    37 #> 4      decrepit_norwayrat   F  25    21     3    29    22     8    47 #> 5          unawake_wisent   F  31    32     6    24    31     5    28 #> 6   turophilic_spreadwing   M  25    34     5    34    34     3    39  # you can also do this easily with pipes! HEXACO_60[1:5, c(\"HEX_E\", \"HEX_C\")] |>   # no need to specify 'vars', as the correct columns are already selected   HexCST$standardize(\"sten\") #>   HEX_E HEX_C #> 1     5     6 #> 2     5     6 #> 3     2     5 #> 4     3     8 #> 5     6     5"},{"path":"https://statismike.github.io/stenR/articles/usage.html","id":"automatically-recalculate-scoretables","dir":"Articles","previous_headings":"Additional functions > CompScoreTable R6 object","what":"Automatically recalculate ScoreTables","title":"stenR usage","text":"score standardization, can also automatically add new raw scores existing frequencies recalculate ScoreTables automatically. done returning values, based recent ScoreTables. can actually use standardize() calc = TRUE just attaching scale scales. ScoreTables generated automatically data standardization - receive data computed ScoreTables","code":"# check the current state of the object summary(HexCST) #> <CompScoreTable> #> Attached <ScoreTable> #>  variable   n      range #>     HEX_E 204 incomplete #>     HEX_C 204   complete #> Attached <StandardScale> #>     name   M SD min max #>     sten 5.5  2   1  10 #>  stanine 5.0  2   1   9  # now, standardize and recalculate! HEXACO_60[1:5, c(\"HEX_H\", \"HEX_C\")] |>   HexCST$standardize(\"sten\", calc = TRUE) #> Warning: Non-integer values were coerced to integers. #>   HEX_H HEX_C #> 1     8     6 #> 2     7     6 #> 3     3     5 #> 4     4     8 #> 5     6     5  # check the new state summary(HexCST) #> <CompScoreTable> #> Attached <ScoreTable> #>  variable   n      range #>     HEX_E 204 incomplete #>     HEX_C 209   complete #>     HEX_H   5 incomplete #> Attached <StandardScale> #>     name   M SD min max #>     sten 5.5  2   1  10 #>  stanine 5.0  2   1   9"},{"path":"https://statismike.github.io/stenR/articles/usage.html","id":"export-tables","dir":"Articles","previous_headings":"Additional functions > CompScoreTable R6 object","what":"Export tables","title":"stenR usage","text":"also option export ScoreTables - either use later procedural way create new CompScoreTable another session - reason also option export FrequencyTables!","code":"# export as ScoreTables st_list <- HexCST$export_ScoreTable() summary(st_list) #>       Length Class      Mode #> HEX_E 3      ScoreTable list #> HEX_C 3      ScoreTable list #> HEX_H 3      ScoreTable list  # export as FrequencyTables ft_list <- HexCST$export_ScoreTable(strip = T) summary(ft_list) #>       Length Class          Mode #> HEX_E 2      FrequencyTable list #> HEX_C 2      FrequencyTable list #> HEX_H 2      FrequencyTable list"},{"path":"https://statismike.github.io/stenR/articles/usage.html","id":"simfrequencytable-using-only-distribution-data","dir":"Articles","previous_headings":"Additional functions","what":"SimFrequencyTable() using only distribution data","title":"stenR usage","text":"examples described two possible scenarios: either raw scores calculate norms , importing scoring table measure documentation. also rare, also possible scenario: access descriptive statistics research article. Using can create Simulated tables:  Simulated class inherited ScoreTable object created basis. Simulated tables can used every way regular ones can one exception: used create CompScoreTable object, raw scores appended kind table standardize() method.","code":"sim_ft <- SimFrequencyTable(min = 10, max = 50, M = 31.04,                              SD = 6.7, skew = -0.3, kurt = 2.89, seed = 2678) #> Constants: Distribution  1   #>  #> Constants calculation time: 0.004 minutes  #> Total Simulation time: 0.004 minutes  class(sim_ft) #> [1] \"FrequencyTable\" \"Simulated\"  plot(sim_ft) SimCST <- CompScoreTable$new(   tables = list(\"simmed\" = sim_ft),   scales = STEN )  SimCST$standardize(   data = data.frame(simmed = round(runif(10, 10, 50), 0)),   what = \"sten\",   calc = TRUE) #> Error in `private$merge_ft()`: #> ! You can't add new raw values to Simulated <FrequencyTable>."},{"path":"https://statismike.github.io/stenR/articles/usage.html","id":"extracting-observations-by-group","dir":"Articles","previous_headings":"Additional functions","what":"Extracting observations by group","title":"stenR usage","text":"also GroupAssignment() intersect_GroupAssignment() functions assign observations basis one two GroupConditions objects, described Groups section. used internally GroupedFrequencyTable(), normalize_scores_grouping() normalize_scores_scoring(), also exported wish extract_observations() manually. Check examples documentation information.","code":""},{"path":"https://statismike.github.io/stenR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michal Kosinski. Author, maintainer.","code":""},{"path":"https://statismike.github.io/stenR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kosinski M (2022). stenR: Standardization Raw Discrete Questionnaire Scores. R package version 0.6.9, https://statismike.github.io/stenR/.","code":"@Manual{,   title = {stenR: Standardization of Raw Discrete Questionnaire Scores},   author = {Michal Kosinski},   year = {2022},   note = {R package version 0.6.9},   url = {https://statismike.github.io/stenR/}, }"},{"path":"https://statismike.github.io/stenR/index.html","id":"stenr-","dir":"","previous_headings":"","what":"Standardization of Raw Discrete Questionnaire Scores","title":"Standardization of Raw Discrete Questionnaire Scores","text":"stenR package tailored mainly users creators psychological questionnaires, though social science researchers survey authors can benefit greatly . provides tools help processes necessary conducting studies: processing data raw item scores raw factor/scale scores normalization raw scores using frequency table (norms developed ). Usually authors questionnaires adaptations. importing scoring table developed questionnaire authors - researchers using measure Furthermore, tools developing using norms grouped basis also provided (two intertwined grouping conditions supported). -depth information provided within vignette Tour data results (basic verbose explanation) less verbose complete stenR usage vignette.","code":""},{"path":"https://statismike.github.io/stenR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Standardization of Raw Discrete Questionnaire Scores","text":"can install current version GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"StatisMike/stenR\")"},{"path":[]},{"path":"https://statismike.github.io/stenR/index.html","id":"data-processing","dir":"","previous_headings":"Usage","what":"Data processing","title":"Standardization of Raw Discrete Questionnaire Scores","text":"Process data item raw scores factor/scales scores","code":"# Exemplary data provided within package str(SLCS) #> 'data.frame':    103 obs. of  19 variables: #>  $ user_id: chr  \"damaged_kiwi\" \"unilateralised_anglerfish\" \"technical_anemonecrab\" \"temperate_americancurl\" ... #>  $ sex    : chr  \"M\" \"F\" \"F\" \"F\" ... #>  $ age    : int  30 31 22 26 22 17 27 24 20 19 ... #>  $ SLCS_1 : int  4 5 4 5 5 5 5 4 4 5 ... #>  $ SLCS_2 : int  2 2 4 3 2 3 1 5 2 1 ... #>  $ SLCS_3 : int  1 2 4 2 3 1 1 4 1 2 ... #>  $ SLCS_4 : int  2 1 4 2 4 2 1 4 4 2 ... #>  $ SLCS_5 : int  2 2 4 1 2 2 2 4 2 2 ... #>  $ SLCS_6 : int  4 4 5 5 5 5 1 2 5 4 ... #>  $ SLCS_7 : int  4 4 4 5 3 5 2 3 5 3 ... #>  $ SLCS_8 : int  4 5 4 5 4 5 5 4 4 5 ... #>  $ SLCS_9 : int  2 3 2 1 3 1 1 4 1 1 ... #>  $ SLCS_10: int  4 4 3 4 4 4 5 4 5 5 ... #>  $ SLCS_11: int  1 1 2 1 1 2 1 3 1 1 ... #>  $ SLCS_12: int  4 2 4 3 3 2 2 4 3 1 ... #>  $ SLCS_13: int  4 5 5 4 3 4 4 4 5 5 ... #>  $ SLCS_14: int  2 1 3 2 4 1 1 4 1 1 ... #>  $ SLCS_15: int  5 4 4 4 4 3 3 2 5 4 ... #>  $ SLCS_16: int  4 5 5 4 5 4 5 5 5 5 ...  # create scale specifications SL_spec <- ScaleSpec(   name = \"Self-Liking\",   item_names = c(\"SLCS_1\", \"SLCS_3\", \"SLCS_5\", \"SLCS_6\", \"SLCS_7\",                   \"SLCS_9\", \"SLCS_11\", \"SLCS_15\"),   min = 1,   max = 5,   reverse = c(\"SLCS_1\", \"SLCS_6\", \"SLCS_7\", \"SLCS_15\") )  SC_spec <- ScaleSpec(   name = \"Self-Competence\",   item_names = c(\"SLCS_2\", \"SLCS_4\", \"SLCS_8\", \"SLCS_10\", \"SLCS_12\",                  \"SLCS_13\", \"SLCS_14\", \"SLCS_16\"),   min = 1,   max = 5,   reverse = c(\"SLCS_8\", \"SLCS_10\", \"SLCS_13\") )  GS_spec <- CombScaleSpec(   name = \"General Score\",   SL_spec,   SC_spec )  # summarize data into factors/scales summed_data <- sum_items_to_scale(   data = SLCS,   SL_spec,   SC_spec,   GS_spec,   retain = c(\"user_id\", \"sex\") )  str(summed_data) #> 'data.frame':    103 obs. of  5 variables: #>  $ user_id        : chr  \"damaged_kiwi\" \"unilateralised_anglerfish\" \"technical_anemonecrab\" \"temperate_americancurl\" ... #>  $ sex            : chr  \"M\" \"F\" \"F\" \"F\" ... #>  $ Self-Liking    : int  13 15 19 10 16 12 18 28 10 14 ... #>  $ Self-Competence: int  20 15 26 19 25 17 14 28 19 13 ... #>  $ General Score  : int  33 30 45 29 41 29 32 56 29 27 ..."},{"path":"https://statismike.github.io/stenR/index.html","id":"create-frequencytable-scoretable-for-normalization","dir":"","previous_headings":"Usage","what":"Create FrequencyTable, ScoreTable for normalization","title":"Standardization of Raw Discrete Questionnaire Scores","text":"Generate norms raw data normalize standardize results","code":"GS_ft <- FrequencyTable(summed_data$`General Score`) #> ℹ There are missing raw score values between minimum and maximum raw scores. #>   They have been filled automatically. #>   No. missing: 13/53 [24.53%] plot(GS_ft) GS_st <- ScoreTable(GS_ft, scale = STEN) plot(GS_st) normalized_GS <- normalize_score(   summed_data$`General Score`,   table = GS_st,   what = \"sten\" )  normalized_data <- normalize_scores_df(   data = summed_data,   vars = \"General Score\",   GS_st,   what = \"sten\",   retain = c(\"user_id\", \"sex\") )  str(normalized_GS) #>  num [1:103] 4 3 6 3 5 3 4 8 3 2 ... str(normalized_data) #> 'data.frame':    103 obs. of  3 variables: #>  $ user_id      : chr  \"damaged_kiwi\" \"unilateralised_anglerfish\" \"technical_anemonecrab\" \"temperate_americancurl\" ... #>  $ sex          : chr  \"M\" \"F\" \"F\" \"F\" ... #>  $ General Score: num  4 3 6 3 5 3 4 8 3 2 ..."},{"path":"https://statismike.github.io/stenR/index.html","id":"create-groupedfrequencytable-and-groupedscoretable","dir":"","previous_headings":"Usage","what":"Create GroupedFrequencyTable and GroupedScoreTable","title":"Standardization of Raw Discrete Questionnaire Scores","text":"Generate norms different groups basis two GroupConditions objects","code":"sex_grouping <- GroupConditions(   conditions_category = \"Sex\",   \"M\" ~ sex == \"M\",   \"F\" ~ sex == \"F\",   \"O\" ~ sex == \"O\" )  GS_gft <- GroupedFrequencyTable(   data = summed_data,   conditions = sex_grouping,   var = \"General Score\",   .all = FALSE ) #> ℹ There are missing raw score values between minimum and maximum raw scores for #>   some groups. They have been filled automatically. #> • M No. missing: 25/42; 59.52% #> • F No. missing: 15/47; 31.91% #> • O No. missing: 33/37; 89.19% plot(GS_gft) GS_gst <- GroupedScoreTable(GS_gft, scale = STEN) plot(GS_gst) grouping_normalized <- normalize_scores_grouped(   data = summed_data,   vars = \"General Score\",   GS_gst,   retain = c(\"user_id\", \"sex\"),   what = \"sten\",   group_col = \"Group\" )  str(grouping_normalized) #> Classes 'data.table' and 'data.frame':   103 obs. of  4 variables: #>  $ Group        : chr  \"M\" \"F\" \"F\" \"F\" ... #>  $ user_id      : chr  \"damaged_kiwi\" \"unilateralised_anglerfish\" \"technical_anemonecrab\" \"temperate_americancurl\" ... #>  $ sex          : chr  \"M\" \"F\" \"F\" \"F\" ... #>  $ General Score: num  3 4 6 3 5 3 4 9 3 3 ..."},{"path":"https://statismike.github.io/stenR/index.html","id":"create-and-export-scoringtable","dir":"","previous_headings":"Usage","what":"Create and export ScoringTable","title":"Standardization of Raw Discrete Questionnaire Scores","text":"Export generated norms universal format","code":"ST_csv <- tempfile(fileext = \".csv\") GS_scoring <- to_ScoringTable(   table = GS_gst,   min_raw = 16,   max_raw = 80 )  export_ScoringTable(   table = GS_scoring,   out_file = ST_csv,   method = \"csv\" ) #> Warning: <GroupConditions> haven't been exported. To export them with csv method, please #> provide the `cond_file` argument"},{"path":"https://statismike.github.io/stenR/index.html","id":"create-scoringtable-from-csv-or-json-file","dir":"","previous_headings":"Usage","what":"Create ScoringTable from csv or json file","title":"Standardization of Raw Discrete Questionnaire Scores","text":"Import ScoringTable universally readable formats (eg. create csv basis published norms)","code":"\"sten\",\"M\",\"F\",\"O\" 1,NA,\"16-22\",NA 2,\"16-32\",\"23-26\",NA 3,\"33-36\",\"27-29\",\"16-35\" 4,\"37-40\",\"30-37\",NA 5,\"41-47\",\"38-41\",\"36-63\" 6,\"48-51\",\"42-47\",\"64-68\" 7,\"52-58\",\"48-49\",NA 8,\"59-71\",\"50-55\",\"69-80\" 9,\"72-80\",\"56-59\",NA 10,NA,\"60-80\",NA imported <- import_ScoringTable(   source = ST_csv,   method = \"csv\",   conditions = sex_grouping )  scoring_normalized <- normalize_scores_scoring(   data = summed_data,   vars = \"General Score\",   imported,   retain = c(\"user_id\", \"sex\"),   group_col = \"Group\" )  str(scoring_normalized) #> 'data.frame':    103 obs. of  4 variables: #>  $ user_id      : chr  \"damaged_kiwi\" \"unilateralised_anglerfish\" \"technical_anemonecrab\" \"temperate_americancurl\" ... #>  $ sex          : chr  \"M\" \"F\" \"F\" \"F\" ... #>  $ Group        : chr  \"M\" \"F\" \"F\" \"F\" ... #>  $ General Score: num  3 4 6 3 5 3 4 9 3 3 ..."},{"path":"https://statismike.github.io/stenR/reference/CombScaleSpec.html","id":null,"dir":"Reference","previous_headings":"","what":"Combined Scale Specification — CombScaleSpec","title":"Combined Scale Specification — CombScaleSpec","text":"Combine multiple ScaleSpec objects one regards sum_items_to_scale() function. Useful one scale factor contains items different possible values hierarchy scale factors. Also allows combining CombScaleSpec object factor structure deeper hierarchy.","code":""},{"path":"https://statismike.github.io/stenR/reference/CombScaleSpec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combined Scale Specification — CombScaleSpec","text":"","code":"CombScaleSpec(name, ..., reverse = character(0))  # S3 method for CombScaleSpec print(x, ...)  # S3 method for CombScaleSpec summary(object, ...)"},{"path":"https://statismike.github.io/stenR/reference/CombScaleSpec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combined Scale Specification — CombScaleSpec","text":"name Name combined scale factor ... arguments passed methods. reverse character vector containing names underlying subscales factors need reversed x CombScaleSpec object object CombScaleSpec object","code":""},{"path":"https://statismike.github.io/stenR/reference/CombScaleSpec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combined Scale Specification — CombScaleSpec","text":"CombScaleSpec object","code":""},{"path":[]},{"path":"https://statismike.github.io/stenR/reference/CombScaleSpec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combined Scale Specification — CombScaleSpec","text":"","code":"# ScaleSpec objects to Combine  first_scale <- ScaleSpec(   name = \"First Scale\",   item_names = c(\"Item_1\", \"Item_2\"),   min = 1,   max = 5 )  second_scale <- ScaleSpec(   name = \"Second Scale\",   item_names = c(\"Item_3\", \"Item_4\"),   min = 0,   max = 7,   reverse = \"Item_3\" )  third_scale <- ScaleSpec(   name = \"Third Scale\",   item_names = c(\"Item_5\", \"Item_6\"),   min = 1,   max = 5 )  # You can combine few ScaleSpec objects into CombScaleSpec  first_comb <- CombScaleSpec(   name = \"First Comb\",   first_scale,   second_scale,   reverse = \"Second Scale\" )  print(first_comb) #> <CombScaleSpec>: First Comb #> Total items: 4 #> Underlying objects: #> 1. <ScaleSpec> First Scale [No.items: 2] #> 2. <ScaleSpec> Second Scale [No.items: 2]  # And also other CombScaleSpec objects!  second_comb <- CombScaleSpec(   name = \"Second Comb\",   first_comb,   third_scale )  print(second_comb) #> <CombScaleSpec>: Second Comb #> Total items: 6 #> Underlying objects: #> 1. <CombScaleSpec> First Comb [No.items: 4] #> 2. <ScaleSpec> Third Scale [No.items: 2]"},{"path":"https://statismike.github.io/stenR/reference/CompScoreTable.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 class for producing easily re-computable ScoreTable — CompScoreTable","title":"R6 class for producing easily re-computable ScoreTable — CompScoreTable","text":"Computable ScoreTable class. can compute store ScoreTables multiple variables containing raw score results. computation, also used compute new standardized scores provided raw scores integrate stored tables. summary() function can used get general information CompScoreTable object.","code":""},{"path":[]},{"path":"https://statismike.github.io/stenR/reference/CompScoreTable.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 class for producing easily re-computable ScoreTable — CompScoreTable","text":"CompScoreTable$new() CompScoreTable$attach_StandardScale() CompScoreTable$attach_FrequencyTable() CompScoreTable$export_ScoreTable() CompScoreTable$standardize() CompScoreTable$clone()","code":""},{"path":"https://statismike.github.io/stenR/reference/CompScoreTable.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 class for producing easily re-computable ScoreTable — CompScoreTable","text":"Initialize CompScoreTable object. can attach one many StandardScale FrequencyTable objects","code":""},{"path":"https://statismike.github.io/stenR/reference/CompScoreTable.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class for producing easily re-computable ScoreTable — CompScoreTable","text":"","code":"CompScoreTable$new(tables = NULL, scales = NULL)"},{"path":"https://statismike.github.io/stenR/reference/CompScoreTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class for producing easily re-computable ScoreTable — CompScoreTable","text":"tables Named list FrequencyTable objects attached. Names indicate name variable table calculated. Defaults NULL, tables available beginning. scales StandardScale object list objects attached. used calculation ScoreTables. Defaults NULL, scales wil available beginning.","code":""},{"path":"https://statismike.github.io/stenR/reference/CompScoreTable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 class for producing easily re-computable ScoreTable — CompScoreTable","text":"FrequencyTable StandardScale objects can attached appropriate methods object initialization.","code":""},{"path":"https://statismike.github.io/stenR/reference/CompScoreTable.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class for producing easily re-computable ScoreTable — CompScoreTable","text":"CompScoreTable object","code":""},{"path":"https://statismike.github.io/stenR/reference/CompScoreTable.html","id":"method-attach-standardscale-","dir":"Reference","previous_headings":"","what":"Method attach_StandardScale()","title":"R6 class for producing easily re-computable ScoreTable — CompScoreTable","text":"Attach new scale object. ScoreTables already computed, score newly-attached scale computed automatically.","code":""},{"path":"https://statismike.github.io/stenR/reference/CompScoreTable.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class for producing easily re-computable ScoreTable — CompScoreTable","text":"","code":"CompScoreTable$attach_StandardScale(scale, overwrite = FALSE)"},{"path":"https://statismike.github.io/stenR/reference/CompScoreTable.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class for producing easily re-computable ScoreTable — CompScoreTable","text":"scale StandardScale object defining scale overwrite boolean indicating definition scale name overwritten","code":""},{"path":"https://statismike.github.io/stenR/reference/CompScoreTable.html","id":"method-attach-frequencytable-","dir":"Reference","previous_headings":"","what":"Method attach_FrequencyTable()","title":"R6 class for producing easily re-computable ScoreTable — CompScoreTable","text":"Attach previously generated FrequencyTable given variable. ScoreTable containing every attached scale calulcated automatically based every new FrequencyTable.","code":""},{"path":"https://statismike.github.io/stenR/reference/CompScoreTable.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class for producing easily re-computable ScoreTable — CompScoreTable","text":"","code":"CompScoreTable$attach_FrequencyTable(   ft,   var,   if_exists = c(\"stop\", \"append\", \"replace\") )"},{"path":"https://statismike.github.io/stenR/reference/CompScoreTable.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class for producing easily re-computable ScoreTable — CompScoreTable","text":"ft FrequencyTable attached var String name variable if_exists Action taken FrequencyTable given variable already exists object. stop DEFAULT: anything append recalculates existing table replace replaces existing table","code":""},{"path":"https://statismike.github.io/stenR/reference/CompScoreTable.html","id":"method-export-scoretable-","dir":"Reference","previous_headings":"","what":"Method export_ScoreTable()","title":"R6 class for producing easily re-computable ScoreTable — CompScoreTable","text":"Export list ScoreTables object","code":""},{"path":"https://statismike.github.io/stenR/reference/CompScoreTable.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class for producing easily re-computable ScoreTable — CompScoreTable","text":"","code":"CompScoreTable$export_ScoreTable(vars = NULL, strip = FALSE)"},{"path":"https://statismike.github.io/stenR/reference/CompScoreTable.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class for producing easily re-computable ScoreTable — CompScoreTable","text":"vars Names variables get tables. left NULL default - get . strip logical indicating ScoreTables stripped FrequencyTables export. Defaults FALSE","code":""},{"path":"https://statismike.github.io/stenR/reference/CompScoreTable.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class for producing easily re-computable ScoreTable — CompScoreTable","text":"list ScoreTable FrequencyTable object","code":""},{"path":"https://statismike.github.io/stenR/reference/CompScoreTable.html","id":"method-standardize-","dir":"Reference","previous_headings":"","what":"Method standardize()","title":"R6 class for producing easily re-computable ScoreTable — CompScoreTable","text":"Compute standardize scores data.frame raw scores. Additionally, raw scores can used recalculate ScoreTables computing (using calc = T).","code":""},{"path":"https://statismike.github.io/stenR/reference/CompScoreTable.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class for producing easily re-computable ScoreTable — CompScoreTable","text":"","code":"CompScoreTable$standardize(data, what, vars = names(data), calc = FALSE)"},{"path":"https://statismike.github.io/stenR/reference/CompScoreTable.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class for producing easily re-computable ScoreTable — CompScoreTable","text":"data data.frame containing raw scores. values get. One either: quan - quantile raw score distribution Z - normalized Z score raw scores name scale attached CompScoreTable object vars vector variable names taken account calc ScoreTables computed (recalculated, already provided?). Default TRUE","code":""},{"path":"https://statismike.github.io/stenR/reference/CompScoreTable.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class for producing easily re-computable ScoreTable — CompScoreTable","text":"data.frame standardized values","code":""},{"path":"https://statismike.github.io/stenR/reference/CompScoreTable.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 class for producing easily re-computable ScoreTable — CompScoreTable","text":"objects class cloneable method.","code":""},{"path":"https://statismike.github.io/stenR/reference/CompScoreTable.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class for producing easily re-computable ScoreTable — CompScoreTable","text":"","code":"CompScoreTable$clone(deep = FALSE)"},{"path":"https://statismike.github.io/stenR/reference/CompScoreTable.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class for producing easily re-computable ScoreTable — CompScoreTable","text":"deep Whether make deep clone.","code":""},{"path":"https://statismike.github.io/stenR/reference/FrequencyTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a FrequencyTable — FrequencyTable","title":"Create a FrequencyTable — FrequencyTable","text":"Normalizes distribution raw scores. can used construct ScoreTable() use StandardScale() normalize standardize raw discrete scores. plot.FrequencyTable method requires ggplot2 package installed.","code":""},{"path":"https://statismike.github.io/stenR/reference/FrequencyTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a FrequencyTable — FrequencyTable","text":"","code":"FrequencyTable(data)  # S3 method for FrequencyTable print(x, ...)  # S3 method for FrequencyTable plot(x, ...)  # S3 method for FrequencyTable summary(object, ...)"},{"path":"https://statismike.github.io/stenR/reference/FrequencyTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a FrequencyTable — FrequencyTable","text":"data vector raw scores. Double values coerced integer x FrequencyTable object ... arguments passed methods. object FrequencyTable object","code":""},{"path":"https://statismike.github.io/stenR/reference/FrequencyTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a FrequencyTable — FrequencyTable","text":"FrequencyTable object. Consists : table: data.frame number observations (n), frequency sample (freq), quantile (quan) normalized Z-score (Z) point raw score status: list containing total number simulated observations (n) information raw scores range completion (range): complete incomplete data.frame descriptive statistcs","code":""},{"path":[]},{"path":"https://statismike.github.io/stenR/reference/GroupAssignment.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign to groups based on GroupConditions — GroupAssignment","title":"Assign to groups based on GroupConditions — GroupAssignment","text":"Using GroupConditions object, assign observations one groups. can export either indices observations, unique ID: column name provided id argument. Mostly used internally complex functions R6 classes, also useful .","code":""},{"path":"https://statismike.github.io/stenR/reference/GroupAssignment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign to groups based on GroupConditions — GroupAssignment","text":"","code":"GroupAssignment(   data,   conditions,   id,   force_disjoint,   force_exhaustive,   skip_faulty = FALSE,   .all = FALSE,   ... )  # S3 method for GroupAssignment print(x, ...)  # S3 method for GroupAssignment summary(object, ...)"},{"path":"https://statismike.github.io/stenR/reference/GroupAssignment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign to groups based on GroupConditions — GroupAssignment","text":"data data.frame containing observations conditions GroupConditions object id character name column containing unique ID observations assign group. provided, indices used instead. force_disjoint boolean indicating groups disjointedness forced case one observation pass conditions one group. TRUE, first condition met indicate group observation assigned . provided, default conditions used force_exhaustive boolean indicating groups exhausiveness forced case observations pass provided conditions. TRUE, assigned .NA group. provided, default conditions used skip_faulty boolean faulty condition skipped? FALSE default, error produced. Faultiness seemingly correct condition may caused variable names present data. .boolean. TRUE, additional group named .created, contain observations. Useful object used creation GroupedFrequencyTable() ... additional arguments passed method x object object GroupAssignment object","code":""},{"path":"https://statismike.github.io/stenR/reference/GroupAssignment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign to groups based on GroupConditions — GroupAssignment","text":"GroupAssignment object list summaries, invisibly","code":""},{"path":[]},{"path":"https://statismike.github.io/stenR/reference/GroupAssignment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign to groups based on GroupConditions — GroupAssignment","text":"","code":"age_grouping <- GroupConditions(   conditions_category = \"Age\",   \"to 20\" ~ age < 20,   \"20 to 40\" ~ age >= 20 & age <= 40,   \"40 to 60\" ~ age >= 40 & age < 60 )  # on basis of GroupConditions create GroupAssignment  age_assignment <- GroupAssignment(   data = HEXACO_60,   age_grouping) #> Warning: ! Some observations were not assigned on provided condition. Set the #>   `force_exhaustive = TRUE` to gather them in `.NA` group.  print(age_assignment) #> <GroupAssignment> #> Total assigned: 202 #> Mode: \"index\" #> Groups: #> \"to 20\", \"20 to 40\", and \"40 to 60\"  # overwrite the default settings imposed by `GroupConditions`  age_assignment_forced <- GroupAssignment(   data = HEXACO_60,   age_grouping,   force_exhaustive = TRUE)  summary(age_assignment_forced) #> <GroupAssignment> #> Status #> • Mode: index #> • Total assigned: 204 #> • Disjointedness: TRUE; Forced: TRUE #> • Exhaustiveness: TRUE; Forced: TRUE #> Assignment [tested vars: `age`] #> • Group: to 20 [obs: 20] #> • Group: 20 to 40 [obs: 173] #> • Group: 40 to 60 [obs: 9] #> • Group: .NA [obs: 2]  # you can also use other unique identifier from your data  age_assignment_forced_w_id <- GroupAssignment(   data = HEXACO_60,   age_grouping,   id = \"user_id\",   force_exhaustive = TRUE)  summary(age_assignment_forced_w_id) #> <GroupAssignment> #> Status #> • Mode: id [default ID: `user_id`] #> • Total assigned: 204 #> • Disjointedness: TRUE; Forced: TRUE #> • Exhaustiveness: TRUE; Forced: TRUE #> Assignment [tested vars: `age`] #> • Group: to 20 [obs: 20] #> • Group: 20 to 40 [obs: 173] #> • Group: 40 to 60 [obs: 9] #> • Group: .NA [obs: 2]"},{"path":"https://statismike.github.io/stenR/reference/GroupConditions.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditions for observation grouping — GroupConditions","title":"Conditions for observation grouping — GroupConditions","text":"help function can create GroupingConditions object, holding basis observation grouping. Objects class can provided complex functions automatically group observations accordingly.","code":""},{"path":"https://statismike.github.io/stenR/reference/GroupConditions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditions for observation grouping — GroupConditions","text":"","code":"GroupConditions(   conditions_category,   ...,   force_disjoint = TRUE,   force_exhaustive = FALSE,   .dots = list() )  # S3 method for GroupConditions print(x, ...)  # S3 method for GroupConditions as.data.frame(x, ...)"},{"path":"https://statismike.github.io/stenR/reference/GroupConditions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditions for observation grouping — GroupConditions","text":"conditions_category chracter value describing character group conditions. Mainly informative. ... additional arguments passed methods. force_disjoint boolean indicating condition formulas default handled force_disjoint strategy. default TRUE. TRUE, first condition met indicate group observation assigned . force_exhaustive boolean indicating groups exhaustiveness forced case observations pass provided conditions. TRUE, assigned .NA group. Defaults FALSE .dots formulas form list x GroupConditions object","code":""},{"path":"https://statismike.github.io/stenR/reference/GroupConditions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditions for observation grouping — GroupConditions","text":"GroupConditions object","code":""},{"path":"https://statismike.github.io/stenR/reference/GroupConditions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditions for observation grouping — GroupConditions","text":"","code":"# create GroupConditions with formula-style conditions per each group  sex_grouping <- GroupConditions(   conditions_category = \"Sex\",   \"M\" ~ sex == \"M\",   \"F\" ~ sex == \"F\",   \"O\" ~ !sex %in% c(\"M\", \"F\") ) print(sex_grouping) #> <GroupConditions> #> Conditions category: Sex #> Tested variables: \"sex\" #> 3 Groups: #> • M IF: sex == \"M\" #> • F IF: sex == \"F\" #> • O IF: !sex %in% c(\"M\", \"F\") #> Forced disjointedness by default: TRUE #> Forced exhaustiveness by default: FALSE  # GroupConditions can also mark if the groups should be handled by default # with forced disjoint (default `TRUE`) and exhaustiveness (default `FALSE`)  age_grouping <- GroupConditions(   conditions_category = \"Age\",   \"to 20\" ~ age < 20,   \"20 to 40\" ~ age >= 20 & age <= 40,   \"40 to 60\" ~ age >= 40 & age < 60,   force_disjoint = FALSE,   force_exhaustive = TRUE ) print(age_grouping) #> <GroupConditions> #> Conditions category: Age #> Tested variables: \"age\" #> 3 Groups: #> • to 20 IF: age < 20 #> • 20 to 40 IF: age >= 20 & age <= 40 #> • 40 to 60 IF: age >= 40 & age < 60 #> Forced disjointedness by default: FALSE #> Forced exhaustiveness by default: TRUE"},{"path":"https://statismike.github.io/stenR/reference/GroupedFrequencyTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create GroupedFrequencyTable — GroupedFrequencyTable","title":"Create GroupedFrequencyTable — GroupedFrequencyTable","text":"Using GroupConditions() object source data.frame compute set FrequencyTable()s single variable","code":""},{"path":"https://statismike.github.io/stenR/reference/GroupedFrequencyTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create GroupedFrequencyTable — GroupedFrequencyTable","text":"","code":"GroupedFrequencyTable(   data,   conditions,   var,   force_disjoint = FALSE,   .all = TRUE )  # S3 method for GroupedFrequencyTable print(x, ...)  # S3 method for GroupedFrequencyTable summary(object, ...)"},{"path":"https://statismike.github.io/stenR/reference/GroupedFrequencyTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create GroupedFrequencyTable — GroupedFrequencyTable","text":"data source data.frame conditions two GroupConditions objects. objects passed along creation higher-level objects used normalize_scores_grouped() called. two objects provided, intersection groups made. var name variable compute GroupedFrequencyTable force_disjoint recommended keep default FALSE, unless sample size big completely mandatory groups disjointed. ...all1 .all2 groups generated. generated, score normalization procedures fail observation assigned provided conditions (eg. missing data), leaving score NA. Defaults TRUE x GroupedFrequencyTable object ... arguments passed methods. object GroupedFrequencyTable object","code":""},{"path":"https://statismike.github.io/stenR/reference/GroupedFrequencyTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create GroupedFrequencyTable — GroupedFrequencyTable","text":"data.frame descriptive statistcs","code":""},{"path":"https://statismike.github.io/stenR/reference/GroupedFrequencyTable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create GroupedFrequencyTable — GroupedFrequencyTable","text":"force_exhaustive always checked FALSE calculations. mandatory validity created FrequencyTables","code":""},{"path":[]},{"path":"https://statismike.github.io/stenR/reference/GroupedScoreTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create GroupedScoreTable — GroupedScoreTable","title":"Create GroupedScoreTable — GroupedScoreTable","text":"Create GroupedScoreTable","code":""},{"path":"https://statismike.github.io/stenR/reference/GroupedScoreTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create GroupedScoreTable — GroupedScoreTable","text":"","code":"GroupedScoreTable(table, scale)  # S3 method for GroupedScoreTable print(x, ...)"},{"path":"https://statismike.github.io/stenR/reference/GroupedScoreTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create GroupedScoreTable — GroupedScoreTable","text":"table GroupedFrequencyTable object scale StandardScale object list multiple StandardScale objects x GroupedScoreTable object ... arguments passed methods.","code":""},{"path":"https://statismike.github.io/stenR/reference/GroupedScoreTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create GroupedScoreTable — GroupedScoreTable","text":"GroupedScoreTable object, consists named list ScoreTable objects GroupConditions object used grouping","code":""},{"path":[]},{"path":"https://statismike.github.io/stenR/reference/HEXACO_60.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data of HEXACO-60 questionnaire results — HEXACO_60","title":"Sample data of HEXACO-60 questionnaire results — HEXACO_60","text":"Dataset containing summed scale scores HEXACO-60 questionnaire. obtained 2020 study Polish incidental sample.","code":""},{"path":"https://statismike.github.io/stenR/reference/HEXACO_60.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data of HEXACO-60 questionnaire results — HEXACO_60","text":"","code":"HEXACO_60"},{"path":"https://statismike.github.io/stenR/reference/HEXACO_60.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data of HEXACO-60 questionnaire results — HEXACO_60","text":"data frame 204 rows 9 variables user_id identity anonimized 'ids::adjective_animal' sex sex participant ('M'ale, 'F'emale 'O'ther) age age participant (15--62) HEX_H Honesty-Humility raw score (14--50) HEX_E Emotionality raw score (10--47) HEX_X eXtraversion raw score (11--46) HEX_A Agreeableness raw score (12--45) HEX_C Consciousness raw score (17--50) HEX_O Openness Experience raw score (18--50)","code":""},{"path":"https://statismike.github.io/stenR/reference/HEXACO_60.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample data of HEXACO-60 questionnaire results — HEXACO_60","text":"HEXACO scales consists 10 items responses numeric values 1-5 (absolute min max 10-50)","code":""},{"path":"https://statismike.github.io/stenR/reference/IPIP_NEO_300.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data of IPIP-NEO-300 questionnaire results — IPIP_NEO_300","title":"Sample data of IPIP-NEO-300 questionnaire results — IPIP_NEO_300","text":"Dataset containing sample 13198 results IPIP-NEO-300 results Johnson J.. study published 2014, preprocessed using sum_items_to_scale() function. contains many observations different ages sexes, also including NA values, whenever least one underlying item scores missing.","code":""},{"path":"https://statismike.github.io/stenR/reference/IPIP_NEO_300.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data of IPIP-NEO-300 questionnaire results — IPIP_NEO_300","text":"","code":"IPIP_NEO_300"},{"path":"https://statismike.github.io/stenR/reference/IPIP_NEO_300.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data of IPIP-NEO-300 questionnaire results — IPIP_NEO_300","text":"data frame 13198 rows 7 variables sex sex participant ('M'ale 'F'emale) age age participant (10--98) N Raw score Neuroticism scale (63--292) E Raw score Extraversion scale (80--296) O Raw score Openness Experience (76--298) Raw score Agreeableness (66--292) C Raw score Consciousness (81--299)","code":""},{"path":"https://statismike.github.io/stenR/reference/IPIP_NEO_300.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample data of IPIP-NEO-300 questionnaire results — IPIP_NEO_300","text":"Johnson, J. . (2014). Measuring thirty facets five factor model 120-item public domain inventory: Development IPIP-NEO-120. Journal Research Personality, 51, 78-89.","code":""},{"path":"https://statismike.github.io/stenR/reference/SLCS.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data of SLCS questionnaire results — SLCS","title":"Sample data of SLCS questionnaire results — SLCS","text":"Dataset containing individual items answers SLCS questionnaire. obtained 2020 study Polish incidental sample.","code":""},{"path":"https://statismike.github.io/stenR/reference/SLCS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data of SLCS questionnaire results — SLCS","text":"","code":"SLCS"},{"path":"https://statismike.github.io/stenR/reference/SLCS.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data of SLCS questionnaire results — SLCS","text":"data frame 103 rows 19 variables user_id identity anonimized 'ids::adjective_animal' sex sex participant ('M'ale, 'F'emale 'O'ther) age age participant (15--68) SLCS_1, SLCS_2, SLCS_3, SLCS_4, SLCS_5, SLCS_6, SLCS_7, SLCS_8, SLCS_9, SLCS_10, SLCS_11, SLCS_12, SLCS_13, SLCS_14, SLCS_15, SLCS_16 Score measure items. (1--5)","code":""},{"path":"https://statismike.github.io/stenR/reference/SLCS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample data of SLCS questionnaire results — SLCS","text":"SLCS item responses can take integer values 1-5. measure consists two sub-scales: Self-Liking Self-Competence, General Score can also calculated. item numbers used sub-scale (R near number means item need reversed.) Self-Liking: 1R, 3, 5, 6R, 7R, 9, 11, 15R Self-Competence: 2, 4, 8R, 10R, 12, 13R, 14, 16 General Score: items (need reversed sub-scales)","code":""},{"path":"https://statismike.github.io/stenR/reference/ScaleSpec.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale Specification object — ScaleSpec","title":"Scale Specification object — ScaleSpec","text":"Object containing scale factor specification data. describes scale factor, regard items source data part , need summed reverse scoring, handle NAs. used sum_items_to_scale() function preprocess item data.","code":""},{"path":"https://statismike.github.io/stenR/reference/ScaleSpec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale Specification object — ScaleSpec","text":"","code":"ScaleSpec(   name,   item_names,   min,   max,   reverse = character(0),   na_strategy = c(\"asis\", \"mean\", \"median\", \"mode\"),   na_value = as.integer(NA),   na_value_custom )  # S3 method for ScaleSpec print(x, ...)  # S3 method for ScaleSpec summary(object, ...)"},{"path":"https://statismike.github.io/stenR/reference/ScaleSpec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale Specification object — ScaleSpec","text":"name character name scale/factor item_names character vector containing names items scale/factor consists . min, max integer containing default minimal/maximal value answer item can scored . reverse character vector containing names items need reversed scale/factor summing. Reversed using default \"min\" \"max\" values. na_strategy character vector specifying strategy taken filling NA. Defaults \"asis\" , options \"mean\", \"median\" \"mode\". Strategies explained details section. na_value integer value input missing values default. Defaults .integer(NA). na_value_custom need specific questions gives specific values place NAs, provide named integer vector . Names names questons. x ScaleSpec object ... arguments passed methods. object ScaleSpec object","code":""},{"path":"https://statismike.github.io/stenR/reference/ScaleSpec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale Specification object — ScaleSpec","text":"object ScaleSpec class data.frame item names, reversed, custom NA value available, invisibly","code":""},{"path":[]},{"path":"https://statismike.github.io/stenR/reference/ScaleSpec.html","id":"na-imputation","dir":"Reference","previous_headings":"","what":"NA imputation","title":"Scale Specification object — ScaleSpec","text":"specifies NA values treated sum_items_to_scale() function run. asis strategy literal: values specified na_value na_value_custom used without changes. mean, median mode functional strategies. work rowwise basis, appropriate value every observation used. values provided check mean, median mode, value provided na_value na_value_custom used. values mean median rounded imputation.","code":""},{"path":"https://statismike.github.io/stenR/reference/ScaleSpec.html","id":"order-of-operations","dir":"Reference","previous_headings":"","what":"Order of operations","title":"Scale Specification object — ScaleSpec","text":"item reversion functional NAs imputation literal NAs imputation","code":""},{"path":[]},{"path":"https://statismike.github.io/stenR/reference/ScaleSpec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scale Specification object — ScaleSpec","text":"","code":"# simple scale specification  simple_scaleSpec <- ScaleSpec(   name = \"simple\",   # scale consists of 5 items   item_names = c(\"item_1\", \"item_2\", \"item_3\", \"item_4\", \"item_5\"),   # item scores can take range of values: 1-5   min = 1,   max = 5,   # item 2 and 5 need to be reversed   reverse = c(\"item_2\", \"item_5\"))  print(simple_scaleSpec) #> <ScaleSpec>: simple #> No. items: 5 [2 reversed]  # scale specification with literal NA imputation strategy   asis_scaleSpec <- ScaleSpec(   name = \"w_asis\",   item_names = c(\"item_1\", \"item_2\", \"item_3\", \"item_4\", \"item_5\"),   min = 1,   max = 5,   reverse = \"item_2\",   # na values by default will be filled with `3`   na_value = 3,   # except for item_4, where they will be filled with `2`   na_value_custom = c(item_4 = 2) )  print(asis_scaleSpec) #> <ScaleSpec>: w_asis #> No. items: 5 [1 reversed]  # scale specification with functional NA imputation strategy  func_scaleSpec <- ScaleSpec(   name = \"w_func\",   item_names = c(\"item_1\", \"item_2\", \"item_3\", \"item_4\", \"item_5\"),   min = 1,   max = 5,   reverse = \"item_2\",   # strategies available are 'mean', 'median' and 'mode'   na_strategy = \"mean\" )  print(func_scaleSpec) #> <ScaleSpec>: w_func #> No. items: 5 [1 reversed]"},{"path":"https://statismike.github.io/stenR/reference/ScoreTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a ScoreTable — ScoreTable","title":"Create a ScoreTable — ScoreTable","text":"Creates table calculate scores specified standardized scale discrete raw score. Uses normalization provided FrequencyTable() scale definition created StandardScale(). creation can used normalize standardize raw scores normalize_score() normalize_scores_df(). plot.ScoreTable() method requires ggplot2 package installed.","code":""},{"path":"https://statismike.github.io/stenR/reference/ScoreTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a ScoreTable — ScoreTable","text":"","code":"ScoreTable(ft, scale)  # S3 method for ScoreTable print(x, ...)  # S3 method for ScoreTable plot(x, scale_name = NULL, ...)"},{"path":"https://statismike.github.io/stenR/reference/ScoreTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a ScoreTable — ScoreTable","text":"ft FrequencyTable object scale StandardScale object list multiple StandardScale objects x ScoreTable object ... arguments passed methods scale_name scores multiple scales available, provide name scale plotting.","code":""},{"path":"https://statismike.github.io/stenR/reference/ScoreTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a ScoreTable — ScoreTable","text":"object class ScoreTable. Consists : table: data.frame containing point raw score: number observations (n), frequency sample (freq), quantile (quan), normalized Z-score (Z), score transformed every provided StandardScales status: list containing total number simulated observations (n) information raw scores range completion (range): complete incomplete scale: named list attached StandardScale objects \\","code":""},{"path":"https://statismike.github.io/stenR/reference/ScoreTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a ScoreTable — ScoreTable","text":"","code":"# firstly compute FrequencyTable for a variable ft <- FrequencyTable(HEXACO_60$HEX_A) #> ℹ There are missing raw score values between minimum and maximum raw scores. #>   They have been filled automatically. #>   No. missing: 2/34 [5.88%]  # then create a ScoreTable st <- ScoreTable(ft, STEN)  # ScoreTable is ready to use! st #> <ScoreTable> #> computed on 204 observations #> Attached <StandardScale> object(s): #>   • sten: `M`: 5.5; `SD`: 2; `min`: 1; `max`: 10"},{"path":"https://statismike.github.io/stenR/reference/ScoringTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create ScoringTable — to_ScoringTable","title":"Create ScoringTable — to_ScoringTable","text":"ScoringTable simple version ScoreTable() GroupedScoreTable(), include FrequencyTable internally. can easily saved csv json using export_ScoringTable() loaded files using import_ScoringTable(). using GroupedScoreTable, columns named name group. created using two GroupCondition object, names columns names groups seperated :","code":""},{"path":"https://statismike.github.io/stenR/reference/ScoringTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create ScoringTable — to_ScoringTable","text":"","code":"to_ScoringTable(table, ...)  # S3 method for ScoreTable to_ScoringTable(   table,   scale = NULL,   min_raw = NULL,   max_raw = NULL,   score_colname = \"Score\",   ... )  # S3 method for GroupedScoreTable to_ScoringTable(table, scale = NULL, min_raw = NULL, max_raw = NULL, ...)  # S3 method for ScoringTable summary(object, ...)"},{"path":"https://statismike.github.io/stenR/reference/ScoringTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create ScoringTable — to_ScoringTable","text":"table ScoreTable GroupedScoreTable object ... arguments passed methods. scale name scale attached table. one scale attached, can left default NULL min_raw, max_raw absolute minimum/maximum score can received. left default NULL, minimum/maximum available data used. score_colname Name column containing raw scores object ScoringTable object","code":""},{"path":"https://statismike.github.io/stenR/reference/ScoringTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create ScoringTable — to_ScoringTable","text":"ScoringTable object","code":""},{"path":"https://statismike.github.io/stenR/reference/ScoringTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create ScoringTable — to_ScoringTable","text":"","code":"Extr_ST <-    # create FrequencyTable   FrequencyTable(data = IPIP_NEO_300$E) |>   # create ScoreTable   ScoreTable(scale = STEN) |>   # and transform into ScoringTable   to_ScoringTable(     min_raw = 60,     max_raw = 300   ) #> ℹ There are missing raw score values between minimum and maximum raw scores. #>   They have been filled automatically. #>   No. missing: 17/217 [7.83%]  summary(Extr_ST) #> <ScoringTable> #> No. groups: ungrouped #> Scale: \"sten\"; `min`: 1; `max`: 10 #### GroupConditions creation ####  sex_grouping <- GroupConditions(   conditions_category = \"Sex\",   \"Male\" ~ sex == \"M\",   \"Female\" ~ sex == \"F\" )  ####   Creating ScoringTable   ####  ##     based on grouped data     ##  Neu_ST <-    # create FrequencyTable   GroupedFrequencyTable(     data = IPIP_NEO_300,     conditions = sex_grouping,      var = \"N\") |>   # create ScoreTable   GroupedScoreTable(     scale = STEN) |>   # and transform into ScoringTable   to_ScoringTable(     min_raw = 60,     max_raw = 300   ) #> ℹ There are missing raw score values between minimum and maximum raw scores for #>   some groups. They have been filled automatically. #> • Male No. missing: 6/221; 2.71% #> • Female No. missing: 12/220; 5.45% #> • .all No. missing: 6/230; 2.61%  summary(Neu_ST) #> <ScoringTable> #> No. groups: 4 #> Scale: \"sten\"; `min`: 1; `max`: 10 #> GroupConditions: 1 #>   1. Category: Sex #>     • Tested vars: \"sex\" #>     • No. groups:: 2 #> .all groups included: TRUE"},{"path":"https://statismike.github.io/stenR/reference/SimFrequencyTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate FrequencyTable using simulated distribution — SimFrequencyTable","title":"Generate FrequencyTable using simulated distribution — SimFrequencyTable","text":"always best use raw scores computing FrequencyTable. always available - case, function can used simulate distribution given descriptive statistics. simulation always treated estimate. distribution generated using Fleishmann method SimMultiCorrData::nonnormvar1() function. SimMultiCorrData package needs installed.","code":""},{"path":"https://statismike.github.io/stenR/reference/SimFrequencyTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate FrequencyTable using simulated distribution — SimFrequencyTable","text":"","code":"SimFrequencyTable(min, max, M, SD, skew = 0, kurt = 3, n = 10000, seed = NULL)"},{"path":"https://statismike.github.io/stenR/reference/SimFrequencyTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate FrequencyTable using simulated distribution — SimFrequencyTable","text":"min minimum value raw score max maximum value raw score M mean raw scores distribution SD standard deviation raw scores distribution skew skewness raw scores distribution. Defaults 0 normal distribution kurt kurtosis raw scores distribution. Defaults 3 normal distribution n number observations simulate. Defaults 10000, greater values used generate better estimates. Final number observations generated Frequency Table may less - values lower min higher max filtered . seed seed value random number generation","code":""},{"path":"https://statismike.github.io/stenR/reference/SimFrequencyTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate FrequencyTable using simulated distribution — SimFrequencyTable","text":"FrequencyTable object created simulated data. Consists : table: data.frame number observations (n), frequency sample (freq), quantile (quan) normalized Z-score (Z) point raw score status: list containing total number simulated observations (n) information raw scores range completion (range): complete incomplete","code":""},{"path":"https://statismike.github.io/stenR/reference/StandardScale.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify standard scale — StandardScale","title":"Specify standard scale — StandardScale","text":"StandardScale objects used ScoreTable() GroupedScoreTable() objects recalculate FrequencyTable() GroupedFrequencyTable() standardized scale score. StandardScale defaults available. Plot method requires ggplot2 package installed.","code":""},{"path":"https://statismike.github.io/stenR/reference/StandardScale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify standard scale — StandardScale","text":"","code":"StandardScale(name, M, SD, min, max)  # S3 method for StandardScale print(x, ...)  # S3 method for StandardScale plot(x, n = 1000, ...)"},{"path":"https://statismike.github.io/stenR/reference/StandardScale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify standard scale — StandardScale","text":"name Name scale M Mean scale SD Standard deviation scale min Minimal value scale takes max Maximal value scale takes x StandardScale object ... arguments passed methods. n Number points plot generates. higher number, detailed plots. Default 1000 nicely detailed plot.","code":""},{"path":"https://statismike.github.io/stenR/reference/StandardScale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify standard scale — StandardScale","text":"StandardScale object","code":""},{"path":"https://statismike.github.io/stenR/reference/attach_scales.html","id":null,"dir":"Reference","previous_headings":"","what":"Attach additional StandardScale to already created ScoreTable — attach_scales","title":"Attach additional StandardScale to already created ScoreTable — attach_scales","text":"Attach additional StandardScale already created ScoreTable","code":""},{"path":"https://statismike.github.io/stenR/reference/attach_scales.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attach additional StandardScale to already created ScoreTable — attach_scales","text":"","code":"attach_scales(x, scale)"},{"path":"https://statismike.github.io/stenR/reference/attach_scales.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attach additional StandardScale to already created ScoreTable — attach_scales","text":"x ScoreTable object scale StandardScale object list multiple StandardScale objects","code":""},{"path":"https://statismike.github.io/stenR/reference/attach_scales.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Attach additional StandardScale to already created ScoreTable — attach_scales","text":"","code":"# having a ScoreTable with one StandardScale attached st <- ScoreTable(FrequencyTable(HEXACO_60$HEX_C), STEN) st$scale #> $sten #> <StandardScale>: sten #> `M`: 5.5 `SD`: 2 `min` 1: `max`: 10 #>  names(st$table) #> [1] \"score\" \"n\"     \"freq\"  \"quan\"  \"Z\"     \"sten\"   # possibly attach more scales to ScoreTable st <- attach_scales(st, list(STANINE, WECHSLER_IQ)) st$scale #> $sten #> <StandardScale>: sten #> `M`: 5.5 `SD`: 2 `min` 1: `max`: 10 #>  #> $stanine #> <StandardScale>: stanine #> `M`: 5 `SD`: 2 `min` 1: `max`: 9 #>  #> $wechslerIQ #> <StandardScale>: wechslerIQ #> `M`: 100 `SD`: 15 `min` 40: `max`: 160 #>  names(st$table) #> [1] \"score\"      \"n\"          \"freq\"       \"quan\"       \"Z\"          #> [6] \"sten\"       \"stanine\"    \"wechslerIQ\""},{"path":"https://statismike.github.io/stenR/reference/check_score_between.html","id":null,"dir":"Reference","previous_headings":"","what":"Pick up standarized value from ScoringTable — check_score_between","title":"Pick up standarized value from ScoringTable — check_score_between","text":"Internal function picking standardized value ScoringTable single observation. normalize_scores_scoring()","code":""},{"path":"https://statismike.github.io/stenR/reference/check_score_between.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pick up standarized value from ScoringTable — check_score_between","text":"","code":"check_score_between(x, col_raw, col_score)"},{"path":"https://statismike.github.io/stenR/reference/check_score_between.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pick up standarized value from ScoringTable — check_score_between","text":"x raw score col_raw Column raw scores ScoringTable col_score COlumn StandardScale score ScoringTable","code":""},{"path":"https://statismike.github.io/stenR/reference/default_scales.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Standard Scales — default_scales","title":"Default Standard Scales — default_scales","text":"StandardScale objects pre-defined usage. create , use StandardScale() function. STEN: M: 5.5, SD: 2, min: 1, max: 10 STANINE: M: 5, SD: 2, min: 1, max: 9 TANINE: M: 50, SD: 10, min: 1, max: 100 TETRONIC: M: 10, SD: 4, min: 0, max: 20 WECHSLER_IQ: M: 100, SD: 15, min: 40, max: 160","code":""},{"path":"https://statismike.github.io/stenR/reference/export_ScaleSpec.html","id":null,"dir":"Reference","previous_headings":"","what":"Export scale specification — export_ScaleSpec","title":"Export scale specification — export_ScaleSpec","text":"Function export ScaleSpec CombScaleSpec object json file can imported import_ScaleSpec()","code":""},{"path":"https://statismike.github.io/stenR/reference/export_ScaleSpec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export scale specification — export_ScaleSpec","text":"","code":"export_ScaleSpec(spec, out_file)"},{"path":"https://statismike.github.io/stenR/reference/export_ScaleSpec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export scale specification — export_ScaleSpec","text":"spec ScaleSpec CombScaleSpec object export out_file path output file","code":""},{"path":[]},{"path":"https://statismike.github.io/stenR/reference/export_ScaleSpec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export scale specification — export_ScaleSpec","text":"","code":"# create temp files ScaleSpecJSON <- tempfile(fileext = \".json\") CombScaleJSON <- tempfile(fileext = \".json\")  ####         import/export ScaleSpec        #### # create scale spec for export scaleSpec <- ScaleSpec(   name = \"First Scale\",    item_names = c(\"Item_1\", \"Item_2\"),    min = 1,  max = 5)  # export / import export_ScaleSpec(scaleSpec, ScaleSpecJSON)  imported_scaleSpec <- import_ScaleSpec(ScaleSpecJSON)  # check if they are the same all.equal(scaleSpec, imported_scaleSpec) #> [1] TRUE  ####      import/export CombScaleSpec       #### # create second scale and CombScaleSpec object second_scale <- ScaleSpec(   name = \"Second Scale\",    item_names = c(\"Item_3\", \"Item_4\"),     min = 0, max = 7,    reverse = \"Item_3\" ) combScale <- CombScaleSpec(   name = \"First Comb\",    scaleSpec,    second_scale,   reverse = \"Second Scale\")  # export / import export_ScaleSpec(combScale, CombScaleJSON) imported_CombScale <- import_ScaleSpec(CombScaleJSON)  # check if they are the same all.equal(combScale, imported_CombScale) #> [1] TRUE"},{"path":"https://statismike.github.io/stenR/reference/export_ScoringTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Export ScoringTable — export_ScoringTable","title":"Export ScoringTable — export_ScoringTable","text":"creation ScoringTable can handy export universally recognized readable format. Two formats currently supported: csv json. can imported back ScoringTable using import_ScoringTable() function. csv format universally readable - can opened, edited altered (eg. publication) spreadsheet editor. case ScoringTable created GroupedScoreTable, GroupConditions can exported another csv file, creating two different files. json format can obtuse, allows export ScoringTable GroupConditions json file.","code":""},{"path":"https://statismike.github.io/stenR/reference/export_ScoringTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export ScoringTable — export_ScoringTable","text":"","code":"export_ScoringTable(   table,   out_file,   method = c(\"csv\", \"json\", \"object\"),   cond_file )"},{"path":"https://statismike.github.io/stenR/reference/export_ScoringTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export ScoringTable — export_ScoringTable","text":"table ScoringTable object export out_file Output file. Ignored method = \"object\" method Method export, either \"csv\", \"json\" \"object\" cond_file Output file GroupConditions. Used method = csv table created GroupedScoreTable.","code":""},{"path":"https://statismike.github.io/stenR/reference/export_ScoringTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export ScoringTable — export_ScoringTable","text":"list containing ScoringTable tibble GroupConditions method = \"object\". NULL methods","code":""},{"path":[]},{"path":"https://statismike.github.io/stenR/reference/export_ScoringTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export ScoringTable — export_ScoringTable","text":"","code":"# Scoring table to export / import #  Consc_ST <-    GroupedFrequencyTable(     data = IPIP_NEO_300,     conditions = GroupConditions(\"Sex\", \"M\" ~ sex == \"M\", \"F\" ~ sex == \"F\"),      var = \"C\") |>   GroupedScoreTable(scale = STEN) |>   to_ScoringTable(min_raw = 60, max_raw = 300) #> ℹ There are missing raw score values between minimum and maximum raw scores for #>   some groups. They have been filled automatically. #> • M No. missing: 21/212; 9.91% #> • F No. missing: 41/218; 18.81% #> • .all No. missing: 24/219; 10.96%  #### Export/import method: csv ####  scoretable_csv <- tempfile(fileext = \".csv\") conditions_csv <- tempfile(fileext = \".csv\")  export_ScoringTable(   table = Consc_ST,   out_file = scoretable_csv,   method = \"csv\",   cond_file = conditions_csv )  ## check if these are regular csv files writeLines(head(readLines(scoretable_csv))) #> \"sten\",\"M\",\"F\",\".all\" #> 1,\"60-145\",\"60-152\",\"60-148\" #> 2,\"146-162\",\"153-168\",\"149-165\" #> 3,\"163-180\",\"169-186\",\"166-183\" #> 4,\"181-198\",\"187-202\",\"184-200\" #> 5,\"199-214\",\"203-219\",\"201-216\" writeLines(head(readLines(conditions_csv))) #> \"category\",\"group\",\"conditions\" #> \"Sex\",\"M\",\"sex == \"\"M\"\"\" #> \"Sex\",\"F\",\"sex == \"\"F\"\"\"  imported_from_csv <- import_ScoringTable(   source = scoretable_csv,   method = \"csv\",   cond_file = conditions_csv )  all.equal(Consc_ST, imported_from_csv) #> [1] TRUE  #### Export/import method: json #### scoretable_json <- tempfile(fileext = \".json\")  export_ScoringTable(   table = Consc_ST,   out_file = scoretable_json,   method = \"json\" )  ## check if this is regular json file writeLines(head(readLines(scoretable_json))) #> {\"ScoringTable\":[{\"sten\":1,\"M\":\"60-145\",\"F\":\"60-152\",\".all\":\"60-148\"},{\"sten\":2,\"M\":\"146-162\",\"F\":\"153-168\",\".all\":\"149-165\"},{\"sten\":3,\"M\":\"163-180\",\"F\":\"169-186\",\".all\":\"166-183\"},{\"sten\":4,\"M\":\"181-198\",\"F\":\"187-202\",\".all\":\"184-200\"},{\"sten\":5,\"M\":\"199-214\",\"F\":\"203-219\",\".all\":\"201-216\"},{\"sten\":6,\"M\":\"215-231\",\"F\":\"220-235\",\".all\":\"217-233\"},{\"sten\":7,\"M\":\"232-247\",\"F\":\"236-249\",\".all\":\"234-248\"},{\"sten\":8,\"M\":\"248-262\",\"F\":\"250-262\",\".all\":\"249-262\"},{\"sten\":9,\"M\":\"263-274\",\"F\":\"263-273\",\".all\":\"263-274\"},{\"sten\":10,\"M\":\"275-300\",\"F\":\"274-300\",\".all\":\"275-300\"}],\"GroupConditions\":{\"Sex\":{\"M\":[\"sex == \\\"M\\\"\"],\"F\":[\"sex == \\\"F\\\"\"]}}}  imported_from_json <- import_ScoringTable(   source = scoretable_json,   method = \"json\" )  all.equal(Consc_ST, imported_from_json) #> [1] TRUE"},{"path":"https://statismike.github.io/stenR/reference/extract_observations.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract observations from data — extract_observations","title":"Extract observations from data — extract_observations","text":"basis GroupAssignment extract one many groups provided data.frame","code":""},{"path":"https://statismike.github.io/stenR/reference/extract_observations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract observations from data — extract_observations","text":"","code":"extract_observations(   data,   groups,   group_names = NULL,   extract_mode = c(\"list\", \"data.frame\"),   strict_names = TRUE,   simplify = FALSE,   id )"},{"path":"https://statismike.github.io/stenR/reference/extract_observations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract observations from data — extract_observations","text":"data data.frame extract data groups GroupAssignment object basis extract data. group_names character vector group names extract. kept default NULL, groups extracted. extract_mode character: either list data.frame. kept default: list, data extracted named list: name list name groups, one contains data.frame observations. data.frame used, assigned data returned one data.frame new column named: GroupAssignment, declaring group. strict_names boolean TRUE, intersected groups extracted using strict strategy: group_names need provided form: \"group1:group2\". FALSE, intersected groups taken regard separately, eg. \"group1\" provided group_names, : \"group1:group2\", \"group1:group3\", \"group1:groupN\"  extracted. Defaults TRUE simplify boolean TRUE, one group returned, returns data.frame without taking account value group_name argument. Defaults FALSE id GroupAssignment mode id, want overwrite original id_col, provide name column . none provided, default id_col used.","code":""},{"path":"https://statismike.github.io/stenR/reference/extract_observations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract observations from data — extract_observations","text":"either: named list data.frames extract_mode = 'list' data.frame extract_mode = 'data.frame' one group returned simplify = TRUE","code":""},{"path":[]},{"path":"https://statismike.github.io/stenR/reference/extract_observations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract observations from data — extract_observations","text":"","code":"#### Create Group Conditions #### sex_grouping <- GroupConditions(   conditions_category = \"Sex\",   \"M\" ~ sex == \"M\",   \"F\" ~ sex == \"F\",   \"O\" ~ !sex %in% c(\"M\", \"F\") )  age_grouping <- GroupConditions(   conditions_category = \"Age\",   \"to 20\" ~ age < 20,   \"20 to 40\" ~ age >= 20 & age <= 40,   \"41 to 60\" ~ age > 40 & age <= 60,   \"above 60\" ~ age > 60 )  #### Create Group Assignement #### # can be done both with indices, so later this can be used only on the same data # or with IDs - so later it can be done with only subset or transformed original data  sex_assignment <- GroupAssignment(HEXACO_60, sex_grouping, id = \"user_id\") age_assignment <- GroupAssignment(HEXACO_60, age_grouping, id = \"user_id\")  #### Intersect two Group Assignement ### # with additional forcing set intersected <- intersect_GroupAssignment(   sex_assignment,   age_assignment,   force_exhaustive = TRUE,   force_disjoint = FALSE )  extracted <- extract_observations(   HEXACO_60,   groups = intersected,   group_names = c(\"M\"),   extract_mode = \"data.frame\",   strict_names = FALSE)  # only groups created from \"M\" group were extracted # groups without observations were dropped table(extracted$GroupAssignment) #>  #> M:20 to 40 M:41 to 60    M:to 20  #>         38          3          4"},{"path":"https://statismike.github.io/stenR/reference/handle_retain.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle retain columns — handle_retain","title":"Handle retain columns — handle_retain","text":"Internal function handles retain columns non-base normalize_scores functions","code":""},{"path":"https://statismike.github.io/stenR/reference/handle_retain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle retain columns — handle_retain","text":"","code":"handle_retain(data, output, retain)"},{"path":"https://statismike.github.io/stenR/reference/handle_retain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle retain columns — handle_retain","text":"data input data output output data.frame retain retain value","code":""},{"path":"https://statismike.github.io/stenR/reference/import_ScaleSpec.html","id":null,"dir":"Reference","previous_headings":"","what":"Import scale specification — import_ScaleSpec","title":"Import scale specification — import_ScaleSpec","text":"Function import ScaleSpec CombScaleSpec object json file havebeen exported export_ScaleSpec()","code":""},{"path":"https://statismike.github.io/stenR/reference/import_ScaleSpec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import scale specification — import_ScaleSpec","text":"","code":"import_ScaleSpec(source)"},{"path":"https://statismike.github.io/stenR/reference/import_ScaleSpec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import scale specification — import_ScaleSpec","text":"source path JSON file containing exported object","code":""},{"path":[]},{"path":"https://statismike.github.io/stenR/reference/import_ScaleSpec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import scale specification — import_ScaleSpec","text":"","code":"# create temp files ScaleSpecJSON <- tempfile(fileext = \".json\") CombScaleJSON <- tempfile(fileext = \".json\")  ####         import/export ScaleSpec        #### # create scale spec for export scaleSpec <- ScaleSpec(   name = \"First Scale\",    item_names = c(\"Item_1\", \"Item_2\"),    min = 1,  max = 5)  # export / import export_ScaleSpec(scaleSpec, ScaleSpecJSON)  imported_scaleSpec <- import_ScaleSpec(ScaleSpecJSON)  # check if they are the same all.equal(scaleSpec, imported_scaleSpec) #> [1] TRUE  ####      import/export CombScaleSpec       #### # create second scale and CombScaleSpec object second_scale <- ScaleSpec(   name = \"Second Scale\",    item_names = c(\"Item_3\", \"Item_4\"),     min = 0, max = 7,    reverse = \"Item_3\" ) combScale <- CombScaleSpec(   name = \"First Comb\",    scaleSpec,    second_scale,   reverse = \"Second Scale\")  # export / import export_ScaleSpec(combScale, CombScaleJSON) imported_CombScale <- import_ScaleSpec(CombScaleJSON)  # check if they are the same all.equal(combScale, imported_CombScale) #> [1] TRUE"},{"path":"https://statismike.github.io/stenR/reference/import_ScoringTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Import ScoringTable — import_ScoringTable","title":"Import ScoringTable — import_ScoringTable","text":"ScoringTable can imported csv, json file tibble. Source file object can either output export_ScoringTable() function, created hand - though needs created following correct format.","code":""},{"path":"https://statismike.github.io/stenR/reference/import_ScoringTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import ScoringTable — import_ScoringTable","text":"","code":"import_ScoringTable(   source,   method = c(\"csv\", \"json\", \"object\"),   cond_file,   conditions )"},{"path":"https://statismike.github.io/stenR/reference/import_ScoringTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import ScoringTable — import_ScoringTable","text":"source Path file import ScoringTable (csv json methods) ScoringTable form data.frame (object method) method Method import, either csv, json object cond_file File import GroupConditions , using csv method conditions GroupCondition object list two . Mandatory object method csv method cond_file provided. provided using json method, original GroupConditions ignored.","code":""},{"path":"https://statismike.github.io/stenR/reference/import_ScoringTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import ScoringTable — import_ScoringTable","text":"ScoringTable object","code":""},{"path":[]},{"path":"https://statismike.github.io/stenR/reference/import_ScoringTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import ScoringTable — import_ScoringTable","text":"","code":"# Scoring table to export / import #  Consc_ST <-    GroupedFrequencyTable(     data = IPIP_NEO_300,     conditions = GroupConditions(\"Sex\", \"M\" ~ sex == \"M\", \"F\" ~ sex == \"F\"),      var = \"C\") |>   GroupedScoreTable(scale = STEN) |>   to_ScoringTable(min_raw = 60, max_raw = 300) #> ℹ There are missing raw score values between minimum and maximum raw scores for #>   some groups. They have been filled automatically. #> • M No. missing: 21/212; 9.91% #> • F No. missing: 41/218; 18.81% #> • .all No. missing: 24/219; 10.96%  #### Export/import method: csv ####  scoretable_csv <- tempfile(fileext = \".csv\") conditions_csv <- tempfile(fileext = \".csv\")  export_ScoringTable(   table = Consc_ST,   out_file = scoretable_csv,   method = \"csv\",   cond_file = conditions_csv )  ## check if these are regular csv files writeLines(head(readLines(scoretable_csv))) #> \"sten\",\"M\",\"F\",\".all\" #> 1,\"60-145\",\"60-152\",\"60-148\" #> 2,\"146-162\",\"153-168\",\"149-165\" #> 3,\"163-180\",\"169-186\",\"166-183\" #> 4,\"181-198\",\"187-202\",\"184-200\" #> 5,\"199-214\",\"203-219\",\"201-216\" writeLines(head(readLines(conditions_csv))) #> \"category\",\"group\",\"conditions\" #> \"Sex\",\"M\",\"sex == \"\"M\"\"\" #> \"Sex\",\"F\",\"sex == \"\"F\"\"\"  imported_from_csv <- import_ScoringTable(   source = scoretable_csv,   method = \"csv\",   cond_file = conditions_csv )  all.equal(Consc_ST, imported_from_csv) #> [1] TRUE  #### Export/import method: json #### scoretable_json <- tempfile(fileext = \".json\")  export_ScoringTable(   table = Consc_ST,   out_file = scoretable_json,   method = \"json\" )  ## check if this is regular json file writeLines(head(readLines(scoretable_json))) #> {\"ScoringTable\":[{\"sten\":1,\"M\":\"60-145\",\"F\":\"60-152\",\".all\":\"60-148\"},{\"sten\":2,\"M\":\"146-162\",\"F\":\"153-168\",\".all\":\"149-165\"},{\"sten\":3,\"M\":\"163-180\",\"F\":\"169-186\",\".all\":\"166-183\"},{\"sten\":4,\"M\":\"181-198\",\"F\":\"187-202\",\".all\":\"184-200\"},{\"sten\":5,\"M\":\"199-214\",\"F\":\"203-219\",\".all\":\"201-216\"},{\"sten\":6,\"M\":\"215-231\",\"F\":\"220-235\",\".all\":\"217-233\"},{\"sten\":7,\"M\":\"232-247\",\"F\":\"236-249\",\".all\":\"234-248\"},{\"sten\":8,\"M\":\"248-262\",\"F\":\"250-262\",\".all\":\"249-262\"},{\"sten\":9,\"M\":\"263-274\",\"F\":\"263-273\",\".all\":\"263-274\"},{\"sten\":10,\"M\":\"275-300\",\"F\":\"274-300\",\".all\":\"275-300\"}],\"GroupConditions\":{\"Sex\":{\"M\":[\"sex == \\\"M\\\"\"],\"F\":[\"sex == \\\"F\\\"\"]}}}  imported_from_json <- import_ScoringTable(   source = scoretable_json,   method = \"json\" )  all.equal(Consc_ST, imported_from_json) #> [1] TRUE"},{"path":"https://statismike.github.io/stenR/reference/intersect_GroupAssignment.html","id":null,"dir":"Reference","previous_headings":"","what":"Intersect two GroupAssignment — intersect_GroupAssignment","title":"Intersect two GroupAssignment — intersect_GroupAssignment","text":"can intersect two GroupAssignment function.","code":""},{"path":"https://statismike.github.io/stenR/reference/intersect_GroupAssignment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intersect two GroupAssignment — intersect_GroupAssignment","text":"","code":"intersect_GroupAssignment(   GA1,   GA2,   force_disjoint = TRUE,   force_exhaustive = FALSE )"},{"path":"https://statismike.github.io/stenR/reference/intersect_GroupAssignment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Intersect two GroupAssignment — intersect_GroupAssignment","text":"GA1, GA2 GroupAssignment objects intersect. previously intersected objects can intersected . force_disjoint boolean indicating groups disjointedness forced case one observation end multiple intersections. TRUE, observation remain first intersection assigned. Default TRUE. force_exhaustive boolean indicating elements assigned intersecting groups gathered together .NA:.NA group","code":""},{"path":"https://statismike.github.io/stenR/reference/intersect_GroupAssignment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Intersect two GroupAssignment — intersect_GroupAssignment","text":"GroupAssignment object intersected groups.","code":""},{"path":[]},{"path":"https://statismike.github.io/stenR/reference/intersect_GroupAssignment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Intersect two GroupAssignment — intersect_GroupAssignment","text":"","code":"sex_grouping <- GroupConditions(   conditions_category = \"Sex\",   \"M\" ~ sex == \"M\",   \"F\" ~ sex == \"F\",   \"O\" ~ !sex %in% c(\"M\", \"F\") )  age_grouping <- GroupConditions(   conditions_category = \"Age\",   \"to 20\" ~ age < 20,   \"20 to 40\" ~ age >= 20 & age <= 40,   \"40 to 60\" ~ age >= 40 & age < 60,   force_exhaustive = TRUE,   force_disjoint = FALSE )  # intersect two distinct GroupAssignements  intersected <- intersect_GroupAssignment(   GA1 = GroupAssignment(HEXACO_60, sex_grouping),   GA2 = GroupAssignment(HEXACO_60, age_grouping),   force_exhaustive = TRUE,   force_disjoint = FALSE )  summary(intersected) #> intersected <GroupAssignment> #> Status #> • Mode: index #> • Total assigned: 204 #> • Disjointedness: FALSE; Forced: FALSE #> • Exhaustiveness: TRUE; Forced: TRUE #> Assignment [tested vars: `sex` and `age`] #> • Group: M:to 20 [obs: 4] #> • Group: M:20 to 40 [obs: 38] #> • Group: M:40 to 60 [obs: 4] #> • Group: M:.NA2 [obs: 0] #> • Group: F:to 20 [obs: 16] #> • Group: F:20 to 40 [obs: 128] #> • Group: F:40 to 60 [obs: 6] #> • Group: F:.NA2 [obs: 1] #> • Group: O:to 20 [obs: 0] #> • Group: O:20 to 40 [obs: 7] #> • Group: O:40 to 60 [obs: 1] #> • Group: O:.NA2 [obs: 1]"},{"path":"https://statismike.github.io/stenR/reference/is_stenR_classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Checkers for stenR S3 and R6 classes — is_stenR_classes","title":"Checkers for stenR S3 and R6 classes — is_stenR_classes","text":"Various functions check given R object given class. Additionally: .intersected() checks GroupAssignment object created intersect_GroupAssignment() GroupedFrequencyTable, GroupedScoreTable ScoringTable created two GroupConditions objects. .Simulated() checks FrequencyTable ScoreTable created basis simulated distribution (based SimFrequencyTable())","code":""},{"path":"https://statismike.github.io/stenR/reference/is_stenR_classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checkers for stenR S3 and R6 classes — is_stenR_classes","text":"","code":"is.GroupConditions(x)  is.GroupAssignment(x)  is.intersected(x)  is.ScaleSpec(x)  is.CombScaleSpec(x)  is.FrequencyTable(x)  is.GroupedFrequencyTable(x)  is.Simulated(x)  is.ScoreTable(x)  is.GroupedScoreTable(x)  is.ScoringTable(x)  is.StandardScale(x)"},{"path":"https://statismike.github.io/stenR/reference/is_stenR_classes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checkers for stenR S3 and R6 classes — is_stenR_classes","text":"x R object","code":""},{"path":"https://statismike.github.io/stenR/reference/mockNAtable.html","id":null,"dir":"Reference","previous_headings":"","what":"Mockup NA table — mockNAtable","title":"Mockup NA table — mockNAtable","text":"Creates mockup table none available given group. Used normalize_scores_grouped(). results passed values \"normalized\" NA","code":""},{"path":"https://statismike.github.io/stenR/reference/mockNAtable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mockup NA table — mockNAtable","text":"","code":"mockNAtable(table)"},{"path":"https://statismike.github.io/stenR/reference/mockNAtable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mockup NA table — mockNAtable","text":"table Table mockup","code":""},{"path":"https://statismike.github.io/stenR/reference/normalize_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize raw scores — normalize_score","title":"Normalize raw scores — normalize_score","text":"Use computed FrequencyTable ScoreTable normalize provided raw scores.","code":""},{"path":"https://statismike.github.io/stenR/reference/normalize_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize raw scores — normalize_score","text":"","code":"normalize_score(x, table, what)"},{"path":"https://statismike.github.io/stenR/reference/normalize_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize raw scores — normalize_score","text":"x vector raw scores normalize table FrequencyTable ScoreTable object values get. One either: quan - quantile x raw score distribution Z - normalized Z score x raw score name scale calculated ScoreTable provided table argument","code":""},{"path":"https://statismike.github.io/stenR/reference/normalize_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize raw scores — normalize_score","text":"Numeric vector values specified argument","code":""},{"path":[]},{"path":"https://statismike.github.io/stenR/reference/normalize_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize raw scores — normalize_score","text":"","code":"# normalize with FrequencyTable ft <- FrequencyTable(HEXACO_60$HEX_H) #> ℹ There are missing raw score values between minimum and maximum raw scores. #>   They have been filled automatically. #>   No. missing: 4/37 [10.81%]  normalize_score(HEXACO_60$HEX_H[1:5], ft, what = \"Z\") #> [1]  1.1993493  0.5918940 -1.9274661 -1.5859745 -0.2673292  # normalize with ScoreTable st <- ScoreTable(ft, list(STEN, STANINE))  normalize_score(HEXACO_60$HEX_H[1:5], st, what = \"sten\") #> [1] 8 7 2 2 5 normalize_score(HEXACO_60$HEX_H[1:5], st, what = \"stanine\") #> [1] 7 6 1 2 4"},{"path":"https://statismike.github.io/stenR/reference/normalize_scores_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize raw scores for multiple variables — normalize_scores_df","title":"Normalize raw scores for multiple variables — normalize_scores_df","text":"Wrapper normalize_score() works data frame multiple variables","code":""},{"path":"https://statismike.github.io/stenR/reference/normalize_scores_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize raw scores for multiple variables — normalize_scores_df","text":"","code":"normalize_scores_df(data, vars, ..., what, retain = FALSE, .dots = list())"},{"path":"https://statismike.github.io/stenR/reference/normalize_scores_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize raw scores for multiple variables — normalize_scores_df","text":"data data.frame containing raw scores vars names columns normalize. Length vars need number tables provided either ... .dots ... ScoreTable FrequencyTable objects used normalization values get. One either: quan - quantile x raw score distribution Z - normalized Z score x raw score name scale calculated ScoreTables provided ... .dots argument retain either boolean: TRUE columns data retained, FALSE none; character vector names columns retained .dots ScoreTable FrequencyTable objects provided list, instead individually ....","code":""},{"path":"https://statismike.github.io/stenR/reference/normalize_scores_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize raw scores for multiple variables — normalize_scores_df","text":"data.frame normalized scores","code":""},{"path":[]},{"path":"https://statismike.github.io/stenR/reference/normalize_scores_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize raw scores for multiple variables — normalize_scores_df","text":"","code":"# normalize multiple variables with FrequencyTable ft_H <- FrequencyTable(HEXACO_60$HEX_H) #> ℹ There are missing raw score values between minimum and maximum raw scores. #>   They have been filled automatically. #>   No. missing: 4/37 [10.81%] ft_E <- FrequencyTable(HEXACO_60$HEX_E) #> ℹ There are missing raw score values between minimum and maximum raw scores. #>   They have been filled automatically. #>   No. missing: 5/38 [13.16%] ft_X <- FrequencyTable(HEXACO_60$HEX_X) #> ℹ There are missing raw score values between minimum and maximum raw scores. #>   They have been filled automatically. #>   No. missing: 2/36 [5.56%]  normalize_scores_df(data = head(HEXACO_60),                      vars = c(\"HEX_H\", \"HEX_E\", \"HEX_X\"),                     ft_H,                     ft_E,                     ft_X,                     what = \"quan\") #>       HEX_H    HEX_E     HEX_X #> 1 88.480392 46.56863 72.794118 #> 2 72.303922 36.76471 80.637255 #> 3  2.696078  2.45098  4.166667 #> 4  5.637255 13.72549 51.470588 #> 5 39.460784 57.59804 28.676471 #> 6 48.284314 31.61765 72.794118  # normalize multiple variables with ScoreTable st_H <- ScoreTable(ft_H, STEN) st_E <- ScoreTable(ft_E, STEN) st_X <- ScoreTable(ft_X, STEN)  normalize_scores_df(data = head(HEXACO_60),                      vars = c(\"HEX_H\", \"HEX_E\", \"HEX_X\"),                     st_H,                     st_E,                     st_X,                     what = \"sten\") #>   HEX_H HEX_E HEX_X #> 1     8     5     7 #> 2     7     5     7 #> 3     2     2     2 #> 4     2     3     6 #> 5     5     6     4 #> 6     5     5     7"},{"path":"https://statismike.github.io/stenR/reference/normalize_scores_grouped.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize scores using GroupedFrequencyTables or GroupedScoreTables — normalize_scores_grouped","title":"Normalize scores using GroupedFrequencyTables or GroupedScoreTables — normalize_scores_grouped","text":"Normalize scores using either GroupedFrequencyTable GroupedScoreTable one variables. Given data.frame also contain columns used GroupingConditions attached table","code":""},{"path":"https://statismike.github.io/stenR/reference/normalize_scores_grouped.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize scores using GroupedFrequencyTables or GroupedScoreTables — normalize_scores_grouped","text":"","code":"normalize_scores_grouped(   data,   vars,   ...,   what,   retain = FALSE,   group_col = NULL,   .dots = list() )"},{"path":"https://statismike.github.io/stenR/reference/normalize_scores_grouped.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize scores using GroupedFrequencyTables or GroupedScoreTables — normalize_scores_grouped","text":"data data.frame object containing raw scores vars names columns normalize. Length vars need number tables provided either ... .dots ... GroupedFrequencyTable GroupedScoreTable objects used normalization. provided order vars values get. One either: quan - quantile x raw score distribution Z - normalized Z score x raw score name scale calculated GroupedScoreTables provided ... .dots argument retain either boolean: TRUE columns data retained, FALSE none; character vector names columns retained group_col name column name group observation qualified . left default NULL, returned. .dots GroupedFrequencyTable GroupedScoreTable objects provided list, instead individually ....","code":""},{"path":"https://statismike.github.io/stenR/reference/normalize_scores_grouped.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize scores using GroupedFrequencyTables or GroupedScoreTables — normalize_scores_grouped","text":"data.frame normalized scores","code":""},{"path":[]},{"path":"https://statismike.github.io/stenR/reference/normalize_scores_grouped.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize scores using GroupedFrequencyTables or GroupedScoreTables — normalize_scores_grouped","text":"","code":"#### create GroupConditions for calculating tables #### age_grouping <- GroupConditions(   conditions_category = \"Age\",   \"below 18\" ~ age < 18,   \"18-22\" ~ age >= 18 & age <= 22,   \"23-26\" ~ age >= 23 & age <= 26,   \"27-32\" ~ age >= 27 & age <= 32,   \"33-40\" ~ age >= 33 & age <= 40,   \"40-60\" ~ age >= 40 & age <= 60,   \"above 60\" ~ age > 60 ) sex_grouping <- GroupConditions(   conditions_category = \"Sex\",   \"Male\" ~ sex == \"M\",   \"Female\" ~ sex == \"F\" )  #### create GroupedFrequencyTable #### NEU_gft <- GroupedFrequencyTable(   data = IPIP_NEO_300,   conditions = list(age_grouping, sex_grouping),   var = \"N\" ) #> ℹ There are missing raw score values between minimum and maximum raw scores for #>   some groups. They have been filled automatically. #> • below 18:Male No. missing: 34/202; 16.83% #> • below 18:Female No. missing: 39/195; 20% #> • below 18:.all2 No. missing: 30/214; 14.02% #> • 18-22:Male No. missing: 37/213; 17.37% #> • 18-22:Female No. missing: 40/202; 19.8% #> • 18-22:.all2 No. missing: 37/230; 16.09% #> • 23-26:Male No. missing: 38/211; 18.01% #> • 23-26:Female No. missing: 52/218; 23.85% #> • 23-26:.all2 No. missing: 32/225; 14.22% #> • 27-32:Male No. missing: 47/220; 21.36% #> • 27-32:Female No. missing: 42/208; 20.19% #> • 27-32:.all2 No. missing: 26/220; 11.82% #> • 33-40:Male No. missing: 26/206; 12.62% #> • 33-40:Female No. missing: 41/208; 19.71% #> • 33-40:.all2 No. missing: 25/221; 11.31% #> • 40-60:Male No. missing: 24/203; 11.82% #> • 40-60:Female No. missing: 19/194; 9.79% #> • 40-60:.all2 No. missing: 12/205; 5.85% #> • above 60:Male No. missing: 60/208; 28.85% #> • above 60:Female No. missing: 55/199; 27.64% #> • above 60:.all2 No. missing: 39/209; 18.66% #> • .all1:Male No. missing: 6/221; 2.71% #> • .all1:Female No. missing: 12/220; 5.45% #> • .all1:.all2 No. missing: 6/230; 2.61%  #### create GroupedScoreTable #### NEU_gst <- GroupedScoreTable(   NEU_gft,   scale = list(STEN, STANINE) )  #### normalize scores #### # to Z score or quantile using GroupedFrequencyTable normalized_to_quan <- normalize_scores_grouped(   IPIP_NEO_300,   vars = \"N\",   NEU_gft,   what = \"quan\",   retain = c(\"sex\", \"age\") )  # only 'sex' and 'age' are retained head(normalized_to_quan) #>    sex age        N #> 1:   F  25 57.72613 #> 2:   F  18 79.69349 #> 3:   F  16 75.96996 #> 4:   M  23 59.94994 #> 5:   F  25 33.29146 #> 6:   M  26 80.60075  # to StandardScale attached to GroupedScoreTable normalized_to_STEN <- normalize_scores_grouped(   IPIP_NEO_300,   vars = \"N\",   NEU_gst,   what = \"stanine\",   retain = FALSE,   group_col = \"sex_age_group\" )  # none is retained, 'sex_age_goup' is created head(normalized_to_STEN) #>      sex_age_group N #> 1:    23-26:Female 5 #> 2:    18-22:Female 7 #> 3: below 18:Female 6 #> 4:      23-26:Male 6 #> 5:    23-26:Female 4 #> 6:      23-26:Male 7"},{"path":"https://statismike.github.io/stenR/reference/normalize_scores_scoring.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize scores using ScoringTables — normalize_scores_scoring","title":"Normalize scores using ScoringTables — normalize_scores_scoring","text":"Normalize scores using either ScoringTable objects one variables. Given data.frame also contain columns used GroupingConditions attached table ()","code":""},{"path":"https://statismike.github.io/stenR/reference/normalize_scores_scoring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize scores using ScoringTables — normalize_scores_scoring","text":"","code":"normalize_scores_scoring(   data,   vars,   ...,   retain = FALSE,   group_col = NULL,   .dots = list() )"},{"path":"https://statismike.github.io/stenR/reference/normalize_scores_scoring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize scores using ScoringTables — normalize_scores_scoring","text":"data data.frame containing raw scores vars names columns normalize. Length vars need number tables provided either ... .dots ... ScoringTable objects used normalization. provided order vars retain either boolean: TRUE columns data retained, FALSE none; names columns retained group_col name column name group observation qualified . left default NULL, returned. Ignored conditions available .dots ScoringTable objects provided list, instead individually ....","code":""},{"path":"https://statismike.github.io/stenR/reference/normalize_scores_scoring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize scores using ScoringTables — normalize_scores_scoring","text":"data.frame normalized scores","code":""},{"path":[]},{"path":"https://statismike.github.io/stenR/reference/plot.GroupedFrequencyTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Gerenic plot of the GroupedFrequencyTable — plot.GroupedFrequencyTable","title":"Gerenic plot of the GroupedFrequencyTable — plot.GroupedFrequencyTable","text":"Generic plot using ggplot2. plots FrequencyTables groups default, chosen ones using group_names argument specified.","code":""},{"path":"https://statismike.github.io/stenR/reference/plot.GroupedFrequencyTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gerenic plot of the GroupedFrequencyTable — plot.GroupedFrequencyTable","text":"","code":"# S3 method for GroupedFrequencyTable plot(   x,   group_names = NULL,   strict_names = TRUE,   plot_grid = is.intersected(x),   ... )"},{"path":"https://statismike.github.io/stenR/reference/plot.GroupedFrequencyTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gerenic plot of the GroupedFrequencyTable — plot.GroupedFrequencyTable","text":"x GroupedFrequencyTable object group_names vector specifying groups appear plots strict_names TRUE, intersected groups filtered using strict strategy: group_names need provided form: \"group1:group2\". FALSE, intersected groups taken regard separately, eg. \"group1\" provided group_names, : \"group1:group2\", \"group1:group3\", \"group1:groupN\"  plotted. Defaults TRUE plot_grid boolean indicating ggplot2::facet_grid() used. FALSE, ggplot2::facet_wrap() used. groups intersected, ignored facet_wrap used. ... named list additional arguments passed facet function used.","code":""},{"path":"https://statismike.github.io/stenR/reference/plot.GroupedScoreTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Gerenic plot of the GroupedScoreTable — plot.GroupedScoreTable","title":"Gerenic plot of the GroupedScoreTable — plot.GroupedScoreTable","text":"Generic plot using ggplot2. plots ScoreTables groups default, chosen ones using group_names argument specified.","code":""},{"path":"https://statismike.github.io/stenR/reference/plot.GroupedScoreTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gerenic plot of the GroupedScoreTable — plot.GroupedScoreTable","text":"","code":"# S3 method for GroupedScoreTable plot(   x,   scale_name = NULL,   group_names = NULL,   strict_names = TRUE,   plot_grid = is.intersected(x),   ... )"},{"path":"https://statismike.github.io/stenR/reference/plot.GroupedScoreTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gerenic plot of the GroupedScoreTable — plot.GroupedScoreTable","text":"x GroupedScoreTable object scale_name scores multiple scales available, provide name scale plotting. group_names names specifying groups appear plots strict_names TRUE, intersected groups filtered using strict strategy: group_names need provided form: \"group1:group2\". FALSE, intersected groups taken regard separately, eg. \"group1\" provided group_names, : \"group1:group2\", \"group1:group3\", \"group1:groupN\"  plotted. Defaults TRUE plot_grid boolean indicating ggplot2::facet_grid() used. FALSE, ggplot2::facet_wrap() used. groups intersected, ignored facet_wrap used. ... named list additional arguments passed facet function.","code":""},{"path":"https://statismike.github.io/stenR/reference/qualify_to_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Qualify observations to groups for normalization — qualify_to_groups","title":"Qualify observations to groups for normalization — qualify_to_groups","text":"Function used internally normalize_scores_grouped() normalize_scores_scoring()","code":""},{"path":"https://statismike.github.io/stenR/reference/qualify_to_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Qualify observations to groups for normalization — qualify_to_groups","text":"","code":"qualify_to_groups(data, conditions)"},{"path":"https://statismike.github.io/stenR/reference/qualify_to_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Qualify observations to groups for normalization — qualify_to_groups","text":"data Data observations group conditions GroupConditions passed normalization function","code":""},{"path":"https://statismike.github.io/stenR/reference/strip_ScoreTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Revert the ScoreTable back to FrequencyTable object. — strip_ScoreTable","title":"Revert the ScoreTable back to FrequencyTable object. — strip_ScoreTable","text":"Revert ScoreTable back FrequencyTable object.","code":""},{"path":"https://statismike.github.io/stenR/reference/strip_ScoreTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Revert the ScoreTable back to FrequencyTable object. — strip_ScoreTable","text":"","code":"strip_ScoreTable(x)"},{"path":"https://statismike.github.io/stenR/reference/strip_ScoreTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Revert the ScoreTable back to FrequencyTable object. — strip_ScoreTable","text":"x ScoreTable object","code":""},{"path":"https://statismike.github.io/stenR/reference/strip_ScoreTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Revert the ScoreTable back to FrequencyTable object. — strip_ScoreTable","text":"","code":"# having a ScoreTable object st <- ScoreTable(FrequencyTable(HEXACO_60$HEX_X), TANINE) #> ℹ There are missing raw score values between minimum and maximum raw scores. #>   They have been filled automatically. #>   No. missing: 2/36 [5.56%] class(st) #> [1] \"ScoreTable\"  # revert it back to the FrequencyTable ft <- strip_ScoreTable(st) class(ft) #> [1] \"FrequencyTable\""},{"path":"https://statismike.github.io/stenR/reference/sum_items_to_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum up discrete raw data — sum_items_to_scale","title":"Sum up discrete raw data — sum_items_to_scale","text":"Helper function sum-- needed - automatically reverse discrete raw item values scale factor measuring.","code":""},{"path":"https://statismike.github.io/stenR/reference/sum_items_to_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum up discrete raw data — sum_items_to_scale","text":"","code":"sum_items_to_scale(data, ..., retain = FALSE, .dots = list())"},{"path":"https://statismike.github.io/stenR/reference/sum_items_to_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sum up discrete raw data — sum_items_to_scale","text":"data data.frame object containing numerical values items data ... objects class ScaleSpec CombScaleSpec. item names found data, summed items available returned data.frame column named name value. retain either boolean: TRUE columns data retained, FALSE none, character vector names columns retained .dots ScaleSpec CombScaleSpec objects provided list, instead individually ....","code":""},{"path":"https://statismike.github.io/stenR/reference/sum_items_to_scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sum up discrete raw data — sum_items_to_scale","text":"object class data.frame","code":""},{"path":"https://statismike.github.io/stenR/reference/sum_items_to_scale.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sum up discrete raw data — sum_items_to_scale","text":"summing raw discrete values scale factor score done according provided specifications utilizing ScaleSpec() objects. information refer constructor help page.","code":""},{"path":[]},{"path":"https://statismike.github.io/stenR/reference/sum_items_to_scale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sum up discrete raw data — sum_items_to_scale","text":"","code":"# create the Scale Specifications for SLCS dataset ## Self-Liking specification SL_spec <- ScaleSpec(   name = \"Self-Liking\",   item_names = paste(\"SLCS\", c(1, 3, 5, 6, 7, 9, 11, 15), sep = \"_\"),   reverse = paste(\"SLCS\", c(1, 6, 7, 15), sep = \"_\"),   min = 1,   max = 5)  ## Self-Competence specification SC_spec <- ScaleSpec(   name = \"Self-Competence\",   item_names = paste(\"SLCS\", c(2, 4, 8, 10, 12, 13, 14, 16), sep = \"_\"),   reverse = paste(\"SLCS\", c(8, 10, 13), sep = \"_\"),   min = 1,   max = 5)  ## General Score specification GS_spec <- CombScaleSpec(   name = \"General Score\",   SL_spec,   SC_spec)  # Sum the raw item scores to raw scale scores SLCS_summed <- sum_items_to_scale(SLCS, SL_spec, SC_spec, GS_spec, retain = \"user_id\") summary(SLCS_summed) #>    user_id           Self-Liking    Self-Competence General Score   #>  Length:103         Min.   : 8.00   Min.   :10.00   Min.   :20.00   #>  Class :character   1st Qu.:15.00   1st Qu.:19.00   1st Qu.:35.00   #>  Mode  :character   Median :19.00   Median :22.00   Median :42.00   #>                     Mean   :20.53   Mean   :22.15   Mean   :42.68   #>                     3rd Qu.:24.00   3rd Qu.:25.00   3rd Qu.:48.50   #>                     Max.   :40.00   Max.   :33.00   Max.   :72.00"},{"path":"https://statismike.github.io/stenR/reference/verify_GC_for_ST.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to verify the provided conditions with conditions available\nin imported ScoringTable — verify_GC_for_ST","title":"Internal function to verify the provided conditions with conditions available\nin imported ScoringTable — verify_GC_for_ST","text":"Internal function verify provided conditions conditions available imported ScoringTable","code":""},{"path":"https://statismike.github.io/stenR/reference/verify_GC_for_ST.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to verify the provided conditions with conditions available\nin imported ScoringTable — verify_GC_for_ST","text":"","code":"verify_GC_for_ST(st_df, gc_df)"},{"path":"https://statismike.github.io/stenR/reference/verify_GC_for_ST.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to verify the provided conditions with conditions available\nin imported ScoringTable — verify_GC_for_ST","text":"st_df data.frame form ScoreTable gc_df data.frame form GroupConditions","code":""},{"path":"https://statismike.github.io/stenR/reference/verify_GC_for_ST.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to verify the provided conditions with conditions available\nin imported ScoringTable — verify_GC_for_ST","text":"list GroupConditions objects NULL","code":""}]
